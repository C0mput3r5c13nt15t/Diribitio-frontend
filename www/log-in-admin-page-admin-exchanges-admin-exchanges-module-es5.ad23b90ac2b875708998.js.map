{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-exchanges/admin-exchanges.page.html","webpack:///src/app/log-in/admin-page/admin-exchanges/admin-exchanges.module.ts","webpack:///src/app/log-in/admin-page/admin-exchanges/admin-exchanges.page.ts"],"names":["AdminExchangesPage","AdminExchangesPageModule","routes","path","component","exchangesService","activatedRoute","config","subscriptions","exchanges","eventName","this","app_config","event_name","text1","get_content_by_index","text2","text3","text4","paramMap","subscribe","adminUrl","get","push","update","getAllExchanges","forEach","sub","unsubscribe","getAllexchanges","data","loadedExchanges","forChild"],"mappings":"uhBAyBkB,sB,qBACA,sB,qBACA,sB,2DAJN,sBACI,sBACE,4BACA,4BACA,4BACA,sBACE,aAAI,QAA4J,OAClK,OACF,OACF,Q,uBAToE,uDAA+D,6BAErH,sCACA,2DACA,0CAEJ,yICpBxB,ICGaA,EDaAC,EAhBPC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCASJ,EAAN,WAkBL,WAAoBK,EACAC,EACAC,aAFA,KAAAF,mBACA,KAAAC,iBACA,KAAAC,SAnBZ,KAAAC,cAAgC,GAIxC,KAAAC,UAAY,GAWZ,KAAAC,UAAYC,KAAKJ,OAAOK,WAAWC,W,UAhB9B,O,EAAA,G,EAAA,kCAsBK,WACRF,KAAKG,MAAQH,KAAKJ,OAAOQ,qBAAqB,kBAAmB,GACjEJ,KAAKK,MAAQL,KAAKJ,OAAOQ,qBAAqB,kBAAmB,GACjEJ,KAAKM,MAAQN,KAAKJ,OAAOQ,qBAAqB,kBAAmB,GACjEJ,KAAKO,MAAQP,KAAKJ,OAAOQ,qBAAqB,kBAAmB,GAEjEJ,KAAKL,eAAea,SAASC,UAAUD,YACrCR,EAAKU,SAAWF,EAASG,IAAI,eAG/BX,KAAKH,cAAce,KACjBZ,KAAKN,iBAAiBmB,OAAOJ,UAAU,kBAAMT,EAAKc,uBAjCjD,oCAyCHd,KAAKH,cAAckB,QAAQC,YAAG,OAAIA,EAAIC,kBAzCnC,wCA4CY,WACfjB,KAAKN,iBAAiBwB,kBAAkBT,UAAUU,YAChDnB,EAAKoB,gBAAkBD,EAAKA,Y,2BA9C3B,K,sCAAM9B,GAAkB,gC,uBAAlBA,EAAkB,02BFZ/B,qBACE,wBACI,uBACE,4BACF,OACF,oBAAW,yBAAc,OAC3B,OACF,OAEA,wBACE,qBACE,0BACE,yBAAgB,0BAAc,OAChC,OACA,4BACE,uBACE,SAAW,sBAAiD,SAAW,sBAAsD,SAAW,sBAA2D,SACrM,OACF,OACA,4BACE,oBACE,mBACE,mBACE,6BAUA,OACF,OACF,OACJ,OACF,OACF,Q,MAnC2C,mEAanC,8BAA4D,sBAAiE,sBAAsE,6BAOlK,4C,oHCElC,IAAMC,EAAN,yB,qBAAMA,I,oDAAAA,IAAwB,SAR1B,CACP,IACA,IACA,IACA,IAAa+B,SAAS9B,O","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n      <ion-button color=\"buttons\" slot=\"start\">\n        <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}\"></ion-back-button>\n      </ion-button>\n    <ion-title>Tauschanfragen</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-card-title>Tauschanfragen</ion-card-title>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-label color=\"text\">\n        {{ text1 }}<ion-icon name=\"close\" color=\"danger\"></ion-icon>{{ text2 }}<ion-icon name=\"checkmark\" color=\"warning\"></ion-icon>{{ text3 }}<ion-icon name=\"checkmark-done\" color=\"success\"></ion-icon>{{ text4 }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-grid>\n        <ion-row>\n          <ion-col>\n            <ion-card color=\"background\" *ngFor=\"let exchange of loadedExchanges\" [disabled]=\"!!!+exchange.confirmed || !!+exchange.accomplished\" [routerLink]=\"['./', exchange.id]\">\n                <ion-item color=\"items\" lines=\"none\">\n                  <ion-icon *ngIf=\"!!!+exchange.confirmed\" slot=\"start\" name=\"close\" color=\"danger\"></ion-icon>\n                  <ion-icon *ngIf=\"!!+exchange.confirmed &&  !!!+exchange.accomplished\" slot=\"start\" name=\"checkmark\" color=\"warning\"></ion-icon>\n                  <ion-icon *ngIf=\"!!+exchange.accomplished\" slot=\"start\" name=\"checkmark-done\" color=\"success\"></ion-icon>\n                  <ion-label color=\"text\">\n                    <h2>Tauschanfrage von {{ exchange.sender.first_name }} {{ exchange.sender.last_name }}  und {{ exchange.receiver.first_name }} {{ exchange.receiver.last_name }}</h2>\n                  </ion-label>\n                </ion-item>\n              </ion-card>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminExchangesPage } from './admin-exchanges.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminExchangesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminExchangesPage]\n})\nexport class AdminExchangesPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ExchangesService } from 'src/app/services/exchanges.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Exchange } from 'src/models/Exchange.model';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-exchanges',\n  templateUrl: './admin-exchanges.page.html',\n  styleUrls: ['./admin-exchanges.page.scss'],\n})\nexport class AdminExchangesPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  exchanges = [];\n  loadedExchanges: Exchange[];\n\n  text1: string;\n  text2: string;\n  text3: string;\n  text4: string;\n\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private exchangesService: ExchangesService,\n              private activatedRoute: ActivatedRoute,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.text1 = this.config.get_content_by_index('admin-exchanges', 0);\n    this.text2 = this.config.get_content_by_index('admin-exchanges', 1);\n    this.text3 = this.config.get_content_by_index('admin-exchanges', 2);\n    this.text4 = this.config.get_content_by_index('admin-exchanges', 3);\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.subscriptions.push(\n      this.exchangesService.update.subscribe(() => this.getAllExchanges())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getAllExchanges() {\n    this.exchangesService.getAllexchanges().subscribe(data => {\n      this.loadedExchanges = data.data;\n    });\n  }\n\n}\n"]}