{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/haptic-7b8ba70a.js","webpack:///node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","webpack:///src/app/services/projects.service.ts","webpack:///src/app/services/messages.service.ts","webpack:///node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","webpack:///src/app/services/schedule.service.ts","webpack:///src/app/services/leaders.service.ts","webpack:///node_modules/@ionic/core/dist/esm/button-active-5da929d4.js","webpack:///src/app/services/students.service.ts","webpack:///src/app/services/exchanges.service.ts","webpack:///node_modules/@ionic/core/dist/esm/theme-5641d27f.js","webpack:///src/app/services/admins.service.ts"],"names":["HapticEngine","win","window","Capacitor","isPluginAvailable","Plugins","Haptics","this","getEngine","isCordova","TapticEngine","isCapacitor","options","engine","style","toUpperCase","impact","notification","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","selection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","SPINNERS","dur","circles","fn","index","total","animationDelay","angle","Math","PI","r","sin","cos","step","elmDuration","cx","cy","fill","viewBox","transform","_","lines","y1","y2","ProjectsService","http","auth","alert","config","router","update","backendUrl","backend_config","url","projectNoun","app_config","project_noun","eventName","event_name","headers","get","projectID","Authorization","jwt","baseUrl","projectData","image","formData","FormData","append","title","descr","leader_name","cost","first_day_begin","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","post","authorized","put","subscribe","data","message","emit","error","editable","backUrl","navigate","delete","MessagesService","messageData","messageID","attachComponent","async","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","el","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","componentOnReady","detachComponent","element","removeViewFromDom","parentElement","remove","Promise","resolve","ScheduleService","schedule","LeadersService","signUpData","form","token","set_jwt","setLoggedIn","sendAuthentificationEmail","reset","loginData","leaderID","createButtonActiveGesture","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","document","target","elementFromPoint","clearActiveButton","setActiveButton","button","buttonToModify","dispatchClick","click","undefined","createGesture","gestureName","threshold","onStart","ev","currentX","currentY","onMove","onEnd","StudentsService","studentData","page","searchStudent","search_email","email","search_first_name","first_name","search_last_name","last_name","search_class","class","studentID","assistentID","ExchangesService","exchangeID","receiverID","receiver_id","hostContext","selector","closest","createColorClasses","color","cssClassMap","length","getClassMap","classes","map","Array","isArray","split","filter","trim","SCHEME","openURL","direction","animation","test","querySelector","preventDefault","push","AdminsService","emailData","emailID","sortingProposal"],"mappings":"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","file":"x","sourcesContent":["const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionEnd();\n        }\n        else {\n            engine.gestureSelectionEnd();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the projects\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectsService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n  Data;\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Gets all projects\n   * @returns RequestObservable\n   */\n  getAllProjects() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects', options);\n  }\n\n  /**\n   * Gets the project with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects/' + projectID, options);\n  }\n\n  /**\n   * Gets some of the project data with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getLittleProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects/show_little/' + projectID, options);\n  }\n\n  /**\n   * Gets the project data available to an admin with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getProjectAdmin(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/project/' + projectID, options);\n  }\n\n  /**\n   * Gets the project of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfProject() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/project', options);\n  }\n\n  /**\n   * Gets the leaded project of the student or leader associated with the provided token\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @returns RequestObservable\n   */\n  getSelfLeadedProject(baseUrl= 'students') {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + baseUrl + '/leaded_project', options);\n  }\n\n  /**\n   * Creates a new project\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project\n   * @param image Contains the image of the new project\n   * @returns RequestObservable\n   */\n  createProject(baseUrl= 'students', projectData, image= null) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    const formData = new FormData();\n    formData.append('title', projectData.title);\n    formData.append('image', image);\n    formData.append('descr', projectData.descr);\n    formData.append('leader_name', projectData.leader_name);\n    formData.append('cost', projectData.cost);\n    formData.append('first_day_begin', projectData.first_day_begin);\n    formData.append('first_day_end', projectData.first_day_end);\n    formData.append('second_day_begin', projectData.second_day_begin);\n    formData.append('second_day_end', projectData.second_day_end);\n    formData.append('min_grade', projectData.min_grade);\n    formData.append('max_grade', projectData.max_grade);\n    formData.append('min_participants', projectData.min_participants);\n    formData.append('max_participants', projectData.max_participants);\n\n    return this.http.post<Response>(this.backendUrl + baseUrl + '/store_project', formData, options);\n  }\n\n  /**\n   * Updates the authorization of the project with the given id\n   * @param projectID Contains the id of the project to be un-/auhorized\n   * @param authorized Contains the new value for authorized\n   */\n  toogleAuthorizedProject(projectID: number, authorized: boolean) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      authorized\n    };\n    this.http.put<Response>(this.backendUrl + 'admins/toogle_authorized/' + projectID, sendData, options).subscribe(data => {\n      if (data) {\n        this.alert.alert(data.message);\n      }\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the editability of the project with the given id\n   * @param projectID Contains the id of the project to be un-/editable\n   * @param editable Contains the new value for editable\n   */\n  toogleEditableProject(projectID: number, editable: boolean) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      editable\n    };\n    this.http.put<Response>(this.backendUrl + 'admins/toogle_editable/' + projectID, sendData, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the project of the student/leader associated with the provided token\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project data\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  putProject(baseUrl= 'students', projectData, backUrl: string) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    this.http.put<Response>(this.backendUrl + baseUrl + '/update_project', projectData, options).subscribe(data => {\n      this.alert.alert(data.message);\n\n      if (baseUrl === 'students') {\n        this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      } else {\n        this.router.navigate([this.eventName + '/' + this.projectNoun + 'leiter/' + backUrl]);\n      }\n\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the project of the student/leader associated with the provided token even after the actual\n   *              deadline if ediatble allows it\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project data\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  touchUpProject(baseUrl= 'students', projectData, backUrl) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    this.http.put<Response>(this.backendUrl + baseUrl + '/touch_up_project', projectData, options).subscribe(data => {\n      this.alert.alert(data.message);\n\n      if (baseUrl === 'students') {\n        this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      } else {\n        this.router.navigate([this.eventName + '/' + this.projectNoun + 'leiter/' + backUrl]);\n      }\n\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Deletes the project with the given id\n   * @param projectID Contains the id of the project to be deleted\n   */\n  deleteProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'admins/destroy_project/' + projectID, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Löschung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\n\n/**\n * This service handles all request to the backend having to do with the messages\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n\n  /**\n   * Creates a new message for a project\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param messageData Contains the message\n   * @returns RequestObservable\n   */\n  createMessage(baseUrl= 'students', messageData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + baseUrl + '/store_leaded_project_message', messageData, options);\n  }\n\n  /**\n   * Deletes the message with the given id from a project\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param messageID Contains the id of the message to be deleted\n   * @returns RequestObservable\n   */\n  deleteMessage(baseUrl= 'students', messageID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + baseUrl + '/destroy_leaded_project_message/' + messageID, options).subscribe(() => {\n      this.update.emit();\n    }, error => {\n      this.alert.error('Löschung der Nachricht fehlgeschlagen!', error.error);\n    });\n  }\n}\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\n\n/**\n * This service handles all request to the backend having to do with the shedule\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScheduleService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private config: ConfigService) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n\n  /**\n   * Gets the current schedule\n   * @returns RequestObservable\n   */\n  getSchedule() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'schedule/1', options);\n  }\n\n  /**\n   * Updates the current schedule\n   * @param schedule Contains the new schedule\n   * @returns RequestObservable\n   */\n  putSchedule(schedule) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.put<Response>(this.backendUrl + 'admins/update_schedule', schedule, options);\n  }\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the leaders\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeadersService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Creates a new leader account\n   * @param signUpData Contains the credentials for the account creation\n   * @param form Contains the form to be resetted after the creation\n   */\n  signUpLeader(signUpData, form) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'leaders/register', signUpData, options).subscribe(data => {\n      if (data.token) {\n        this.auth.set_jwt(data.token);\n        this.auth.setLoggedIn(true);\n        this.router.navigate([this.eventName + '/Anmeldung']);\n      }\n      this.alert.alert('Dein Account wurde erfolgreich erstellt!');\n      this.sendAuthentificationEmail();\n      this.update.emit();\n      form.reset();\n    }, error => {\n      this.alert.error('Erstellung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the leader associated with the provided token\n   */\n  sendAuthentificationEmail() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'leaders/email/resend', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the leader associated with the provided token (same as before)\n   * @returns RequestObservable\n   */\n  sendAuthentificationEmailSubscribe() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'leaders/email/resend', null, options);\n  }\n\n  /**\n   * Logs in as leader with the given credentials\n   * @param loginData Contains the credentials to be used (email and password)\n   * @returns RequestObservable\n   */\n  logInLeader(loginData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'leaders/login', loginData, options);\n  }\n\n  /**\n   * Logs out the leader associated with the provided token\n   */\n  logOutLeader() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'leaders/logout', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.auth.setLoggedIn(false);\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Logout fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Gets the leader associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfLeader() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'leaders/self', options);\n  }\n\n  /**\n   * Gets all leaders\n   * @returns RequestObservable\n   */\n  getAllLeaders() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/index_leaders', options);\n  }\n\n  /**\n   * Deletes the leader with the given id\n   * @param leaderID Contains the id of the leader to be deleted\n   */\n  deleteLeader(leaderID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'admins/destroy_leader/' + leaderID, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Löschung des ' + this.projectNoun + 'leiters fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Deletes the leader associated with the provided token\n   */\n  destroySelfLeader() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'leaders/self_destroy', options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.auth.setLoggedIn(false);\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Löschung Ihres Accounts fehlgeschlagen!', error.error);\n    });\n  }\n}\n","import { c as writeTask } from './index-92848855.js';\nimport { createGesture } from './index-eea61379.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n    let currentTouchedButton;\n    let initialTouchedButton;\n    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const target = document.elementFromPoint(x, y);\n        if (!target || !isButton(target)) {\n            clearActiveButton();\n            return;\n        }\n        if (target !== currentTouchedButton) {\n            clearActiveButton();\n            setActiveButton(target, hapticFeedbackFn);\n        }\n    };\n    const setActiveButton = (button, hapticFeedbackFn) => {\n        currentTouchedButton = button;\n        if (!initialTouchedButton) {\n            initialTouchedButton = currentTouchedButton;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.add('ion-activated'));\n        hapticFeedbackFn();\n    };\n    const clearActiveButton = (dispatchClick = false) => {\n        if (!currentTouchedButton) {\n            return;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.remove('ion-activated'));\n        /**\n         * Clicking on one button, but releasing on another button\n         * does not dispatch a click event in browsers, so we\n         * need to do it manually here. Some browsers will\n         * dispatch a click if clicking on one button, dragging over\n         * another button, and releasing on the original button. In that\n         * case, we need to make sure we do not cause a double click there.\n         */\n        if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n            currentTouchedButton.click();\n        }\n        currentTouchedButton = undefined;\n    };\n    return createGesture({\n        el,\n        gestureName: 'buttonActiveDrag',\n        threshold: 0,\n        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n        onEnd: () => {\n            clearActiveButton(true);\n            hapticSelectionEnd();\n            initialTouchedButton = undefined;\n        }\n    });\n};\n\nexport { createButtonActiveGesture as c };\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the students\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentsService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) {}\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Creates a new student account\n   * @param signUpData Contains the credentials for the account creation\n   * @param form Contains the form to be resetted after the creation\n   */\n  signUpStudent(signUpData, form) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'students/register', signUpData, options).subscribe(data => {\n      if (data.token) {\n        this.auth.set_jwt(data.token);\n        this.auth.setLoggedIn(true);\n        this.router.navigate([this.eventName + '/Anmeldung']);\n      }\n      this.alert.alert('Dein Account wurde erfolgreich erstellt!');\n      this.sendAuthentificationEmail();\n      this.update.emit();\n      form.reset();\n    }, error => {\n      this.alert.error('Erstellung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the student associated with the provided token\n   */\n  sendAuthentificationEmail() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'students/email/resend', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the student associated with the provided token (same as before)\n   * @returns RequestObservable\n   */\n  sendAuthentificationEmailSubscribe() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/email/resend', null, options);\n  }\n\n  /**\n   * Logs in as student with the given credentials\n   * @param loginData Contains the credentials to be used (email and password)\n   * @returns RequestObservable\n   */\n  logInStudent(loginData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/login', loginData, options);\n  }\n\n  /**\n   * Logs out the student associated with the provided token\n   */\n  logOutStudent() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/logout', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.auth.setLoggedIn(false);\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Logout fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Gets the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfStudent() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/self', options);\n  }\n\n  /**\n   * Gets the id of an given student\n   * @param studentData Contains the student\n   * @returns RequestObservable\n   */\n  getStudentID(studentData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/id', studentData, options);\n  }\n\n  /**\n   * Gets all names of all students\n   * @returns RequestObservable\n   */\n  getAllStudentNames() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/little_index_students', options);\n  }\n\n  /**\n   * Gets all students of the given page\n   * @param page Contains the number of the page\n   * @returns RequestObservable\n   */\n  getAllStudents(page: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/index_students?page=' + page, options);\n  }\n\n  /**\n   * Gets all students that are relevant for the search\n   * @param searchValue Contains a string value of the search\n   * @returns RequestObservable\n   */\n  getAllSearchedStudents(searchStudent) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      search_email: searchStudent.email,\n      search_first_name: searchStudent.first_name,\n      search_last_name: searchStudent.last_name,\n      search_class: searchStudent.class\n    };\n    return this.http.post<Response>(this.backendUrl + 'admins/search_index_students', sendData, options);\n  }\n\n  /**\n   * Gets all friends of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getFriends() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/friends', options);\n  }\n\n  /**\n   * Makes the student with the given id a assistant leader in the project of the student associated\n   *              with the provided token\n   * @param studentID Contains the id of the student to be promoted\n   */\n  promoteStudent(studentID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/promote_student/' + studentID, null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Ernennung des Assistenten fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Suspends the assistent leader with the given id as assistant leader in the project of the student\n   *              associated with the provided token\n   * @param assistentID Contains the id of the assistent leader to be suspended\n   */\n  suspendStudent(assistentID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/suspend_student/' + assistentID, null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Suspendierung des Assistenten fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Removes the assistant leader role of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  quitAssistant() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.put<Response>(this.backendUrl + 'students/quit_assistant', null, options);\n  }\n\n  /**\n   * Updates the student associated with the provided token\n   * @param studentData Contains the updated student\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  putSelfStudent(studentData, backUrl: string) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/self_update', studentData, options).subscribe(() => {\n      this.alert.alert('Der Account wurde erfolgreich aktualisiert!');\n      this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\n\n/**\n * This service handles all request to the backend having to do with the exchanges\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExchangesService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n\n  /**\n   * Gets all exchange requests for the student associated with the provided toke\n   * @returns Requestobservable\n   */\n  getAllExchangesForParticipant() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/exchange_requests', options);\n  }\n\n  /**\n   * Gets all exchanges\n   * @returns Requestobservable\n   */\n  getAllexchanges() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/index_exchanges', options);\n  }\n\n  /**\n   * Gets the exchage with the given id\n   * @param exchangeID Contains the id of the exchange\n   * @returns RequestObservable\n   */\n  getExchange(exchangeID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/exchange/' + exchangeID, options);\n  }\n\n  /**\n   * Confirms the exchage with the given id\n   * @param exchangeID Contains the id of the exchange\n   * @returns RequestObservable\n   */\n  confirmExchange(exchangeID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.put<Response>(this.backendUrl + 'students/confirm_exchange/' + exchangeID, null, options);\n  }\n\n  /**\n   * Carries out the exchage with the given id\n   * @param exchangeID Contains the id of the exchange\n   */\n  carryOutExchange(exchangeID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'admins/accomplish_exchange/' + exchangeID, null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Durchführung des Tausches fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Creates an exchage request to the student with the given id\n   * @param receiverID Contains the id of the recieving student\n   * @returns RequestObservable\n   */\n  createExchange(receiverID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      receiver_id: receiverID\n    };\n    return this.http.post<Response>(this.backendUrl + 'students/store_exchange', sendData, options);\n  }\n\n  /**\n   * Deletes the current exchange of the student associated with the provided toke\n   * @returns RequestObservable\n   */\n  deleteSelfExchange() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.delete<Response>(this.backendUrl + 'students/destroy_exchange', options);\n  }\n\n  /**\n   * Deletes the exchage with the given id\n   * @param exchangeID Contains the id of the exchage\n   */\n  deleteExchange(exchangeID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'admins/destroy_exchange/' + exchangeID, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Löschung der Tauschanfrage fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the admins\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminsService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Creates a new admin account\n   * @param signUpData Contains the credentials for the account creation\n   * @param form Contains the form to be resetted after the creation\n   */\n  signUpAdmin(signUpData, form) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'admins/register', signUpData, options).subscribe(data => {\n      if (data.token) {\n        this.auth.set_jwt(data.token);\n        this.auth.setLoggedIn(true);\n        this.router.navigate([this.eventName + '/Anmeldung']);\n      }\n      this.alert.alert('Dein Account wurde erfolgreich erstellt!');\n      this.sendAuthentificationEmail();\n      this.update.emit();\n      form.reset();\n    }, error => {\n      this.alert.error('Erstellung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the admin associated with the provided token\n   */\n  sendAuthentificationEmail() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'admins/email/resend', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the admin associated with the provided token (same as before)\n   * @returns RequestObservable\n   */\n  sendAuthentificationEmailSubscribe() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'admins/email/resend', null, options);\n  }\n\n  /**\n   * Logs in as admin with the given credentials\n   * @param loginData Contains the credentials to be used (email and password)\n   * @returns RequestObservable\n   */\n  logInAdmin(loginData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'admins/login', loginData, options);\n  }\n\n  /**\n   * Logs out the admin associated with the provided token\n   */\n  logOutAdmin() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'admins/logout', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.auth.setLoggedIn(false);\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Logout fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Gets the admin associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfAdmin() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/self', options);\n  }\n\n  /**\n   * Gets all emails that are allowed for the creation of admin accounts\n   * @returns RequestObservable\n   */\n  getAllSignUpEmails() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'sign_up_emails', options);\n  }\n\n  /**\n   * Authorizes a new email to be used for the creation of an admin account\n   * @param emailData Contains the email to be authorized\n   * @returns RequestObservable\n   */\n  createSignUpEmail(emailData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'sign_up_emails', emailData, options);\n  }\n\n  /**\n   * Forbids the furter use of an email that was previously allowed for the creation of an admin account\n   * @param emailID Contains the id of the email to be forbidden\n   */\n  deleteSignUpEmail(emailID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'sign_up_emails/' + emailID, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Sperrung der E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Creates a sorting proposal\n   * @returns RequestObservable\n   */\n  createSortingProposal() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'admins/create_sorting_proposal', null, options);\n  }\n\n  /**\n   * Gets the current sorting proposal\n   * @returns RequestObservable\n   */\n  requestSortingProposal() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/request_sorting_proposal', options);\n  }\n\n  /**\n   * Updates the current sorting proposal\n   * @returns RequestObservable\n   */\n  editSortingProposal(sortingProposal) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'admins/edit_sorting_proposal', sortingProposal, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Erstellung eines Backups fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Applies the current sorting proposal to the actual database\n   * @returns MessageString\n   */\n  applySortingProposal() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'admins/apply_sorting_proposal', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Anwendung des Sortiervorschlags fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n"]}