{"version":3,"sources":["webpack:///src/app/log-in/student-page/student-page.page.html","webpack:///src/app/log-in/student-page/student-page.module.ts","webpack:///src/app/log-in/student-page/student-page.page.ts","webpack:///src/app/log-in/student-page/student-page.page.scss"],"names":["routes","path","component","StudentPagePageModule","imports","forChild","declarations","StudentPagePage","activatedRoute","router","exchangesService","studentsService","projectsService","scheduleService","config","alert","subscriptions","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","buttonPressed","projectNoun","app_config","project_noun","projectsNoun","projects_noun","studentsCanCreateProjects","students_can_create_projects","text","get_content","currentDate","paramMap","subscribe","has","navigate","getSchedule","getStudent","push","update","forEach","sub","unsubscribe","data","getSelfStudent","getAllExchangesForParticipant","requestData","email_verified_at","logOutStudent","sendAuthentificationEmailSubscribe","message","error","selector","template","providers"],"mappings":"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","file":"log-in-student-page-student-page-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"menu\\\">\\n    <ion-title>Schüler</ion-title>\\n    <ion-button color=\\\"buttons\\\" slot=\\\"end\\\" (click)=\\\"logout()\\\">\\n      <ion-icon name=\\\"log-out\\\"></ion-icon>\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content color=\\\"background\\\">\\n  <ion-card color=\\\"background\\\"class=\\\"content\\\">\\n    <ion-card-header>\\n      <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n        <ion-card-title><ion-label color=\\\"buttons\\\" text-wrap>Willkommen {{ loadedStudent.user_name }}</ion-label></ion-card-title>\\n        <ion-button (click)=\\\"refresh()\\\" slot=\\\"end\\\" color=\\\"buttons\\\"><ion-icon name=\\\"refresh\\\"></ion-icon></ion-button>\\n      </ion-item>\\n    </ion-card-header>\\n    <ion-card-content *ngIf=\\\"text\\\">\\n      <ion-label color=\\\"text\\\">\\n        {{ text }}\\n      </ion-label>\\n    </ion-card-content>\\n    <ion-card-content *ngIf=\\\"loadedStudent.email_verified_at == null && !buttonPressed\\\">\\n      <ion-label color=\\\"text\\\">\\n        Sie heaben ihre E-Mail noch nicht verifiziert. Bitte holen sie dies nach bevor sie fortfahren.\\n      </ion-label>\\n      <div class=\\\"ion-padding\\\">\\n        <ion-button color=\\\"buttons\\\" expand=\\\"block\\\" class=\\\"ion-no-margin\\\" (click)=\\\"sendVerificationEmail()\\\">E-Mail senden</ion-button>\\n      </div>\\n    </ion-card-content>\\n    <ion-card-content>\\n      <ion-list>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.registration\\\" routerLink='./{{ projectsNoun }}'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"apps\\\"></ion-icon>Alle {{ projectsNoun }}\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.registration && currentDate <= schedule.sort_students\\\" [routerLink]=\\\"['./Anmeldung']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"log-in\\\"></ion-icon>Anmeldedaten eingeben\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedStudent.role === 1 && loadedStudent.project_id != 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\\\" [routerLink]=\\\"['./Tauschanfrage senden']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"send\\\"></ion-icon>Tauschanfragen senden\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedStudent.role === 1 && loadedStudent.exchange_requests.length > 0 && loadedStudent.project_id != 0 && loadedStudent.exchange_id == 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\\\" [routerLink]=\\\"['./Tauschanfrage bestätigen']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"swap-horizontal\\\"></ion-icon>Tauschanfrage bestätigen\\n          <ion-badge color=\\\"buttons\\\" slot=\\\"end\\\">{{ loadedStudent.exchange_requests.length }}</ion-badge>\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedStudent.role === 1 && loadedStudent.project_id != 0\\\" routerLink='./{{ projectNoun }}'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"people\\\"></ion-icon>{{ projectNoun }} einsehen\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.begin && currentDate <= schedule.control && loadedStudent.project_id == 0 && loadedStudent.role === 1 && studentsCanCreateProjects\\\" routerLink='./{{ projectNoun }} erstellen'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"create\\\"></ion-icon>{{ projectNoun }} erstellen\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\\\" routerLink='./{{ projectNoun }} verwalten'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"construct\\\"></ion-icon>{{ projectNoun }} verwalten\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.begin && currentDate <= schedule.control && loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\\\" [routerLink]=\\\"['./Assistenten verwalten']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"construct\\\"></ion-icon>Assistenten verwalten\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedStudent.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\\\" [routerLink]=\\\"['./Nachricht senden']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"send\\\"></ion-icon>Nachricht senden\\n        </ion-item>\\n      </ion-list>\\n      <div class=\\\"ion-padding\\\">\\n        <ion-button color=\\\"buttons\\\" expand=\\\"block\\\" class=\\\"ion-no-margin\\\" (click)=\\\"logout()\\\">Abmelden</ion-button>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { StudentPagePage } from './student-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentPagePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [StudentPagePage]\n})\nexport class StudentPagePageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ExchangesService } from 'src/app/services/exchanges.service';\nimport { DatePipe } from '@angular/common';\nimport {formatDate} from '@angular/common';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { Student } from 'src/models/Student.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-student-page',\n  templateUrl: './student-page.page.html',\n  styleUrls: ['./student-page.page.scss'],\n  providers: [DatePipe]\n})\nexport class StudentPagePage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  text: string;\n\n  buttonPressed = true;\n\n  projectNoun = this.config.app_config.project_noun;\n  projectsNoun = this.config.app_config.projects_noun;\n\n  studentsCanCreateProjects = this.config.app_config.students_can_create_projects;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private exchangesService: ExchangesService,\n              private studentsService: StudentsService,\n              private projectsService: ProjectsService,\n              private scheduleService: ScheduleService,\n              private config: ConfigService,\n              private alert: AlertService) {}\n\n  ngOnInit() {\n    this.text = this.config.get_content('user-page');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n    });\n\n    this.getSchedule();\n    this.getStudent();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.studentsService.update.subscribe(() => this.getStudent()),\n      this.projectsService.update.subscribe(() => this.getStudent())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getStudent() {\n    this.studentsService.getSelfStudent().subscribe(data => {\n      this.loadedStudent = data.data;\n      this.loadedStudent.exchange_requests = [];\n      if (this.currentDate > this.schedule.exchange && this.currentDate <= this.schedule.projects) {\n        this.exchangesService.getAllExchangesForParticipant().subscribe(requestData => {\n          this.loadedStudent.exchange_requests = requestData.data;\n        });\n      }\n      if (this.loadedStudent.email_verified_at == null) {\n        this.buttonPressed = false;\n      }\n    });\n  }\n\n  refresh() {\n    this.getStudent();\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  logout() {\n    this.studentsService.logOutStudent();\n  }\n\n  sendVerificationEmail() {\n    this.studentsService.sendAuthentificationEmailSubscribe().subscribe(data => {\n      this.alert.alert(data.message);\n      this.buttonPressed = true;\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzdHVkZW50LXBhZ2UucGFnZS5zY3NzIn0= */\";"]}