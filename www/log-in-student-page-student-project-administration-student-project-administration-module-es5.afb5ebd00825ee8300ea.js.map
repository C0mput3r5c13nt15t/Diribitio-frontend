{"version":3,"sources":["webpack:///src/app/log-in/student-page/student-project-administration/student-project-administration.page.html","webpack:///src/app/log-in/student-page/student-project-administration/student-project-administration.module.ts","webpack:///src/app/log-in/student-page/student-project-administration/student-project-administration.page.ts"],"names":["StudentProjectAdministrationPage","StudentProjectAdministrationPageModule","routes","path","component","activatedRoute","router","projectsService","scheduleService","studentsService","config","subscriptions","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","leadedProject","authorized","editable","title","image","descr","leader_name","leader_type","leader_id","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","messages","participants","assistant_student_leaders","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","imageUrl","this","backend_config","projectNoun","app_config","project_noun","eventName","event_name","studentNoProjectEditByAssistants","get_error","studentLoadingProject","studentWrongTime","currentDate","paramMap","subscribe","has","studentUrl","get","navigate","getSchedule","getProject","getStudent","push","update","forEach","sub","unsubscribe","data","getSelfLeadedProject","getSelfStudent","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n    <ion-toolbar color=\"menu\">\n      <ion-button color=\"buttons\" slot=\"start\">\n        <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Schüler/{{ studentUrl }}\"></ion-back-button>\n      </ion-button>\n      <ion-title>{{ projectNoun }}</ion-title>\n      <ion-button *ngIf=\" !!+leadedProject.editable == false || currentDate <= this.schedule.control || currentDate > this.schedule.registration\" [disabled]=\"currentDate <= this.schedule.begin || currentDate > this.schedule.control\" color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">\n        <ion-icon name=\"create\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"currentDate > this.schedule.control && currentDate <= this.schedule.registration && !!+leadedProject.editable == true\" color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">\n        <ion-icon name=\"create\"></ion-icon>\n      </ion-button>\n    </ion-toolbar>\n  </ion-header>\n  \n  <ion-content color=\"background\">\n    <ion-card color=\"background\" *ngIf=\"leadedProject.leader_id == null && leadedProject.title == null && leadedProject.authorized == null\" class=\"content\">\n      <ion-card-content>\n        <ion-text color=\"danger\">{{ studentLoadingProject }}</ion-text>\n      </ion-card-content>\n    </ion-card>\n    <ion-card color=\"background\" *ngIf=\"loadedStudent.role === 2\" class=\"content\">\n      <ion-img *ngIf=\"leadedProject.image != '' && leadedProject.image != null\" src='{{ imageUrl }}{{ leadedProject.image }}'></ion-img>\n      <ion-card-header>\n        <ion-card-title text-wrap>{{ leadedProject.title }}</ion-card-title>\n      </ion-card-header>\n      <ion-card-content>\n        <ion-item-group>\n          <ion-item color=\"items\" lines=\"none\" class=\"descr\">\n            <ion-text color=\"text\">{{ leadedProject.descr }}</ion-text>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Leiter</ion-label>\n          </ion-item-divider>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">{{ leadedProject.leader_name }}</ion-label>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Kosten</ion-label>\n          </ion-item-divider>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">{{ leadedProject.cost }}€</ion-label>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Zeitraum</ion-label>\n          </ion-item-divider>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">1.Tag:  {{ leadedProject.first_day_begin }} bis {{ leadedProject.first_day_end }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">2.Tag:  {{ leadedProject.second_day_begin }} bis {{ leadedProject.second_day_end }}</ion-label>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Klassenstufe</ion-label>\n          </ion-item-divider>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">{{ leadedProject.min_grade }}. bis {{ leadedProject.max_grade }}.Klasse</ion-label>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Teinehmeranzahl</ion-label>\n          </ion-item-divider>\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-label color=\"text\">von {{ leadedProject.min_participants }} bis {{ leadedProject.max_participants }}</ion-label>\n          </ion-item>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Notizen</ion-label>\n          </ion-item-divider>\n          <div *ngIf=\"leadedProject.messages.length\">\n            <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of leadedProject.messages\">\n              <ion-card class=\"message\" color=\"background\">\n                <ion-card-content>\n                  <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n                  <ion-text color=\"text\">{{ message.message }}</ion-text>\n                </ion-card-content>\n              </ion-card>\n            </ion-item>\n          </div>\n          <ion-item-divider color=\"background\">\n            <ion-label color=\"text\">Teilnehmer</ion-label>\n          </ion-item-divider>\n          <div *ngIf=\"leadedProject.leader_type === 'App\\\\Student' && leadedProject.leader_id == loadedStudent.id\">\n            <ion-item color=\"items\" lines=\"none\">\n              <ion-card color=\"background\">\n                <ion-card-content>\n                  <ion-text color=\"text\"><ion-icon name=\"star\"></ion-icon> {{ loadedStudent.first_name }} {{ loadedStudent.last_name }} {{ loadedStudent.grade }}{{ loadedStudent.letter }} (eigener Account)</ion-text>\n                </ion-card-content>\n              </ion-card>\n            </ion-item>\n          </div>\n          <div *ngIf=\"leadedProject.assistant_student_leaders.length\">\n            <ion-item color=\"items\" lines=\"none\" *ngFor=\"let assistant of leadedProject.assistant_student_leaders\">\n              <ion-card color=\"background\">\n                <ion-card-content>\n                  <ion-text color=\"text\"><ion-icon name=\"star-half\"></ion-icon> {{ assistant.first_name }} {{ assistant.last_name }} {{ assistant.grade }}{{ assistant.letter }}</ion-text>\n                </ion-card-content>\n              </ion-card>\n            </ion-item>\n          </div>\n          <div *ngIf=\"leadedProject.participants.length\">\n            <ion-item color=\"items\" lines=\"none\" *ngFor=\"let participant of leadedProject.participants\">\n              <ion-card color=\"background\">\n                <ion-card-content>\n                  <ion-text color=\"text\">{{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}</ion-text>\n                </ion-card-content>\n              </ion-card>\n            </ion-item>\n          </div>\n          <div class=\"ion-padding\">\n            <ion-button color=\"buttons\" *ngIf=\"!!+leadedProject.editable == false || currentDate <= this.schedule.control || currentDate > this.schedule.registration\" [disabled]=\"leadedProject.leader_id != loadedStudent.id || currentDate <= this.schedule.begin || currentDate > this.schedule.control\" expand=\"block\" class=\"ion-no-margin\"  color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">{{ projectNoun }} bearbeiten</ion-button>\n            <ion-button color=\"buttons\" *ngIf=\"leadedProject.leader_id == loadedStudent.id && currentDate > this.schedule.control && currentDate <= this.schedule.registration && !!+leadedProject.editable == true\" expand=\"block\" class=\"ion-no-margin\"  color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">{{ projectNoun }} nachbessern</ion-button>\n            <ion-text *ngIf=\"leadedProject.leader_id != loadedStudent.id\" color=\"text\">{{ studentNoProjectEditByAssistants }}</ion-text>\n            <ion-text *ngIf=\"currentDate <= this.schedule.begin && !!+leadedProject.editable == false || currentDate > this.schedule.control && !!+leadedProject.editable == false\" color=\"text\">{{ studentWrongTime }}</ion-text>\n          </div>\n        </ion-item-group>\n      </ion-card-content>\n    </ion-card>\n  </ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { StudentProjectAdministrationPage } from './student-project-administration.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentProjectAdministrationPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [StudentProjectAdministrationPage]\n})\nexport class StudentProjectAdministrationPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { Project } from 'src/models/Project.model';\nimport { Student } from 'src/models/Student.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { formatDate } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-project-administration',\n  templateUrl: './student-project-administration.page.html',\n  styleUrls: ['./student-project-administration.page.scss'],\n})\nexport class StudentProjectAdministrationPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  studentUrl: string;\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 2\n  };\n\n  leadedProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_type: '',\n    leader_id: 0,\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    messages: [],\n    participants: [],\n    assistant_student_leaders: []\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  studentNoProjectEditByAssistants: string;\n  studentLoadingProject: string;\n  studentWrongTime: string;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private projectsService: ProjectsService,\n              private scheduleService: ScheduleService,\n              private studentsService: StudentsService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.projectNoun = this.config.app_config.project_noun;\n\n    this.studentNoProjectEditByAssistants = this.config.get_error('student-no_project_edit_by_assistants');\n    this.studentLoadingProject = this.config.get_error('student-loading_project');\n    this.studentWrongTime = this.config.get_error('student-wrong_time');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.studentUrl = paramMap.get('ParticipantName');\n    });\n\n    this.getSchedule();\n    this.getProject();\n    this.getStudent();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.projectsService.update.subscribe(() => this.getProject()),\n      this.studentsService.update.subscribe(() => this.getStudent())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getProject() {\n    this.projectsService.getSelfLeadedProject('students').subscribe(data => {\n      this.leadedProject = data.data;\n    });\n  }\n\n  getStudent() {\n    this.studentsService.getSelfStudent().subscribe(data => {\n      this.loadedStudent = data.data;\n    });\n  }\n\n}\n"]}