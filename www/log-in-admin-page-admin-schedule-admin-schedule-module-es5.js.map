{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.page.html","webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.page.ts","webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.page.scss","webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.module.ts"],"names":["AdminSchedulePage","activatedRoute","scheduleService","router","alert","config","subscriptions","schedule","id","begin","Date","control","registration","sort_students","exchange","projects","end","maxDate","setFullYear","getFullYear","toISOString","projectsNoun","app_config","projects_noun","eventName","event_name","text","get_content","currentDate","paramMap","subscribe","adminUrl","get","getSchedule","push","update","forEach","sub","unsubscribe","data","putSchedule","message","emit","navigate","error","selector","template","routes","path","component","AdminSchedulePageModule","imports","forChild","declarations"],"mappings":"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","file":"log-in-admin-page-admin-schedule-admin-schedule-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"menu\\\">\\n    <ion-button color=\\\"buttons\\\" slot=\\\"start\\\">\\n      <ion-back-button icon=\\\"arrow-back\\\" defaultHref=\\\"{{ eventName }}/Admin/{{ adminUrl }}\\\"></ion-back-button>\\n    </ion-button>\\n    <ion-title>Zeitplan verwalten</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content color=\\\"background\\\">\\n  <form #form=\\\"ngForm\\\" name=\\\"ParticipantForm\\\" (ngSubmit)=\\\"manageSchedule()\\\">\\n    <ion-card color=\\\"background\\\" class=\\\"content\\\">\\n      <ion-card-header>\\n        <ion-card-title>Zeitplan</ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content *ngIf=\\\"text\\\">\\n        <ion-label color=\\\"text\\\">\\n          {{ text }}\\n        </ion-label>\\n      </ion-card-content>\\n      <ion-card-content>\\n        <ion-list>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            ab <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Beginn\\\" [(ngModel)]=\\\"schedule.begin\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.begin && currentDate <= schedule.control\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"create\\\"></ion-icon>\\n            <ion-label>Registrierung und Erstellung der {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.begin || currentDate > schedule.control\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"create\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">Registrierung und Erstellung der {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" name=\\\"Kontrolle\\\" [(ngModel)]=\\\"schedule.control\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.control && currentDate <= schedule.registration\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"shield-checkmark\\\"></ion-icon>\\n            <ion-label>Kontrolle und Freigabe der {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.control || currentDate > schedule.registration\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"shield-checkmark\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">Kontrolle und Freigabe der {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Anmeldung\\\" [(ngModel)]=\\\"schedule.registration\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.registration && currentDate <= schedule.sort_students\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"log-in\\\"></ion-icon>\\n            <ion-label>Anmeldung für die {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.registration || currentDate > schedule.sort_students\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"log-in\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">Anmeldung für die {{ projectsNoun }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Sortierung\\\" [(ngModel)]=\\\"schedule.sort_students\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.sort_students && currentDate <= schedule.exchange\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"funnel\\\"></ion-icon>\\n            <ion-label>Sortierung durch den Algorithmus</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.sort_students || currentDate > schedule.exchange\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"funnel\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">Sortierung durch den Algorithmus</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Tausch\\\" [(ngModel)]=\\\"schedule.exchange\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.exchange && currentDate <= schedule.projects\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"swap-horizontal\\\"></ion-icon>\\n            <ion-label>Tauschphase</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.exchange || currentDate > schedule.projects\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"swap-horizontal\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">Tauschphase</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis <ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Projekte\\\" [(ngModel)]=\\\"schedule.projects\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n          <ion-item color=\\\"buttons\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate > schedule.projects && currentDate <= schedule.end\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"flag\\\"></ion-icon>\\n            <ion-label>{{ eventName }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\" *ngIf=\\\"currentDate <= schedule.projects || currentDate > schedule.end\\\">\\n            <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"flag\\\"></ion-icon>\\n            <ion-label color=\\\"text\\\">{{ eventName }}</ion-label>\\n          </ion-item>\\n          <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n            bis<ion-datetime [max]=\\\"maxDate\\\" displayFormat=\\\"DD.MM.YYYY\\\" placeholder=\\\"Bitte ein Datum wählen\\\" required name=\\\"Ende\\\" [(ngModel)]=\\\"schedule.end\\\" picker-format=\\\"YYYY-MM-DD\\\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\\\"Abbrechen\\\" doneText=\\\"Ok\\\"></ion-datetime>\\n          </ion-item>\\n        </ion-list>\\n        <div class=\\\"ion-padding\\\">\\n          <ion-button color=\\\"buttons\\\" [disabled]=\\\"form.invalid\\\" expand=\\\"block\\\" type=\\\"submit\\\" class=\\\"ion-no-margin\\\">Zeitplan bestätigen</ion-button>\\n        </div>\\n      </ion-card-content>\\n    </ion-card>\\n  </form>\\n</ion-content>\\n\";","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { formatDate } from '@angular/common';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-schedule',\n  templateUrl: './admin-schedule.page.html',\n  styleUrls: ['./admin-schedule.page.scss'],\n})\nexport class AdminSchedulePage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n  /**\n   * Contains the max date to be inputted in yyyy-MM-dd format (1 year from today)\n   */\n  maxDate: any = new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString();\n\n  text: string;\n\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private scheduleService: ScheduleService,\n              private router: Router,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('admin-schedule');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.getSchedule();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  manageSchedule() {\n    this.schedule.begin = formatDate(this.schedule.begin, 'yyyy-MM-dd', 'en');\n    this.schedule.control = formatDate(this.schedule.control, 'yyyy-MM-dd', 'en');\n    this.schedule.registration = formatDate(this.schedule.registration, 'yyyy-MM-dd', 'en');\n    this.schedule.sort_students = formatDate(this.schedule.sort_students, 'yyyy-MM-dd', 'en');\n    this.schedule.exchange = formatDate(this.schedule.exchange, 'yyyy-MM-dd', 'en');\n    this.schedule.projects = formatDate(this.schedule.projects, 'yyyy-MM-dd', 'en');\n    this.schedule.end = formatDate(this.schedule.end, 'yyyy-MM-dd', 'en');\n\n    this.scheduleService.putSchedule(this.schedule).subscribe(data => {\n      this.alert.alert(data.message);\n      this.scheduleService.update.emit();\n      this.router.navigate([this.eventName + '/Admin/' + this.adminUrl]);\n    }, error => {\n      this.alert.error('Aktualisierung des Zeitplans fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhZG1pbi1zY2hlZHVsZS5wYWdlLnNjc3MifQ== */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminSchedulePage } from './admin-schedule.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminSchedulePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminSchedulePage]\n})\nexport class AdminSchedulePageModule {}\n"]}