{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-students-leaders/admin-students-leaders.page.html","webpack:///src/app/log-in/admin-page/admin-students-leaders/admin-students-leaders.module.ts","webpack:///src/app/log-in/admin-page/admin-students-leaders/admin-students-leaders.page.ts"],"names":["AdminStudentsLeadersPage","AdminStudentsLeadersPageModule","routes","path","component","studentsService","scheduleService","leadersService","projectsService","activatedRoute","alertCtrl","adminsService","alert","config","subscriptions","loadedProjects","loadedParticipantsNames","sortedProjects","loadedStudents","loadedLeaders","sorted","schedule","id","begin","Date","control","registration","sort_students","exchange","projects","end","searchStudent","email","first_name","last_name","class","text1","this","get_content_by_index","text2","text3","text4","text5","page","lastPage","projectNoun","app_config","project_noun","projectsNoun","projects_noun","eventName","event_name","currentDate","paramMap","subscribe","adminUrl","get","load","push","update","forEach","sub","unsubscribe","loading","getSchedule","data","getProjects","getAllStudentNames","requestSortingProposal","keyCode","search","getAllSearchedStudents","searchStudents","student","stu","grade","letter","first_friend","first_friend_name","second_friend","second_friend_name","third_friend","third_friend_name","first_wish","first_wish_title","second_wish","second_wish_title","third_wish","third_wish_title","project_id","project_title","role","getParticipantName","getProjectTitle","getAllProjects","getStudents","getLeaders","getAllStudents","meta","last_page","getAllLeaders","leader","lea","user_name","projectID","searchedProject","filter","project","title","participantID","searchedParticipant","participant","leaderID","create","header","message","buttons","text","handler","deleteLeader","then","alertEl","present","createSortingProposal","error","event","detail","value","oldProjectId","newProjectId","oldProject","index","participants","indexOf","splice","newProject","editSortingProposal","applySortingProposal","refresh","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Schüler und {{ projectNoun }}leiter verwalten</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" class=\"content\">\n    <ion-card-header>\n      <ion-card-title>Schüler</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text1\">\n      <ion-label color=\"text\">\n        {{ text1 }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card color=\"background\">\n      <ion-card-header>\n        <ion-card-title>\n          <ion-label color=\"buttons\" text-wrap>Schüler suchen</ion-label>\n        </ion-card-title>\n      </ion-card-header>\n      <ion-card-content *ngIf=\"text2\">\n        <ion-label color=\"text\">\n          {{ text2 }}\n        </ion-label>\n      </ion-card-content>\n      <ion-card-content>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-input (keypress)=\"search()\" color=\"text\" placeholder=\"Email\" type=\"email\" [(ngModel)]=\"searchStudent.email\" name=\"SerchEmail\"></ion-input>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-input (keypress)=\"search()\" color=\"text\" placeholder=\"Vorname\" type=\"text\" [(ngModel)]=\"searchStudent.first_name\" name=\"SerchFirstName\"></ion-input>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-input (keypress)=\"search()\" color=\"text\" placeholder=\"Nachname\" type=\"text\" [(ngModel)]=\"searchStudent.last_name\" name=\"SeatchLastName\"></ion-input>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-input (keypress)=\"search()\" color=\"text\" placeholder=\"Klasse\" type=\"text\" [(ngModel)]=\"searchStudent.class\" name=\"SerchClass\"></ion-input>\n        </ion-item>\n        <div class=\"ion-padding\">\n          <ion-button expand=\"block\" class=\"ion-no-margin\" color=\"buttons\" (click)=\"search()\"><ion-icon name=\"search\"></ion-icon></ion-button>\n        </div>\n      </ion-card-content>\n    </ion-card>\n    <div class=\"ion-padding\">\n      <ion-button expand=\"block\" class=\"ion-no-margin\" color=\"buttons\" (click)=\"refresh()\"><ion-icon name=\"refresh\"></ion-icon></ion-button>\n    </div>\n    <ion-card-content color=\"background\">\n      <ion-grid *ngIf=\"searchStudents\">\n        <ion-row>\n          <ion-col><h2>E-Mail</h2></ion-col>\n          <ion-col><h2>Schüler</h2></ion-col>\n          <ion-col><h2>Wünsche</h2></ion-col>\n          <ion-col><h2>Freunde</h2></ion-col>\n          <ion-col><h2>Link zum {{ projectNoun }}</h2></ion-col>\n        </ion-row>\n        <ion-row color=\"background\" *ngFor=\"let participant of searchStudents\" id=\"participant.ID\">\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.email }}\n            </ion-label>\n          </ion-col>\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}\n            </ion-label>\n            <br>\n            <ion-label color=\"text\" *ngIf=\"participant.role == 2\"> ({{ projectNoun }}leiter)</ion-label>\n          </ion-col>\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.first_wish_title }}<br>\n              {{ participant.second_wish_title }}<br>\n              {{ participant.third_wish_title }}\n            </ion-label>\n          </ion-col>\n          <ion-col color=\"text\">\n            <ion-label color=\"text\">\n              {{ participant.first_friend_name }}<br>\n              {{ participant.second_friend_name }}<br>\n              {{ participant.third_friend_name }}\n            </ion-label>\n          </ion-col>\n          <ion-col>\n            <a *ngIf=\"participant.project_id != 0 && participant.project_title != 'fehlerhaftes Projekt'\" routerLink='../../{{ projectsNoun }}/{{participant.project_id}}'>{{ participant.project_title }}</a>\n            <a *ngIf=\"participant.project_id == 0\">kein {{ projectNoun }}</a>\n            <a *ngIf=\"participant.project_title == 'fehlerhaftes Projekt'\">{{ projectNoun }} ist fehlerhaft</a>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n      <ion-grid *ngIf=\"!searchStudents\">\n        <ion-row class=\"ion-justify-content-around\">\n          <ion-col><h2>E-Mail</h2></ion-col>\n          <ion-col><h2>Schüler</h2></ion-col>\n          <ion-col><h2>Wünsche</h2></ion-col>\n          <ion-col><h2>Freunde</h2></ion-col>\n          <ion-col><h2>Link zum {{ projectNoun }}</h2></ion-col>\n        </ion-row>\n        <ion-row class=\"ion-justify-content-around\" color=\"background\" *ngFor=\"let participant of loadedStudents\" id=\"participant.ID\">\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.email }}\n            </ion-label>\n          </ion-col>\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}\n            </ion-label>\n            <br>\n            <ion-label color=\"text\" *ngIf=\"participant.role == 2\"> ({{ projectNoun }}leiter)</ion-label>\n          </ion-col>\n          <ion-col>\n            <ion-label color=\"text\">\n              {{ participant.first_wish_title }}<br>\n              {{ participant.second_wish_title }}<br>\n              {{ participant.third_wish_title }}\n            </ion-label>\n          </ion-col>\n          <ion-col color=\"text\">\n            <ion-label color=\"text\">\n              {{ participant.first_friend_name }}<br>\n              {{ participant.second_friend_name }}<br>\n              {{ participant.third_friend_name }}\n            </ion-label>\n          </ion-col>\n          <ion-col>\n            <a *ngIf=\"participant.project_id != 0 && participant.project_title != 'fehlerhaftes Projekt'\" routerLink='../../{{ projectsNoun }}/{{participant.project_id}}'>{{ participant.project_title }}</a>\n            <a *ngIf=\"participant.project_id == 0\">kein {{ projectNoun }}</a>\n            <a *ngIf=\"participant.project_title == 'fehlerhaftes Projekt'\">{{ projectNoun }} ist fehlerhaft</a>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n\n      <div *ngIf=\"page < lastPage && !searchStudents\" class=\"ion-padding\">\n        <ion-button color=\"buttons\" (click)=\"getMoreStudents()\" expand=\"block\" class=\"ion-no-margin\">Weiter Schüler laden</ion-button>\n      </div>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-card-title>\n        {{ projectNoun }}leiter\n      </ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text3\">\n      <ion-label color=\"text\">\n        {{ text3 }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-grid>\n        <ion-row>\n          <ion-col><h2>E-Mail</h2></ion-col>\n          <ion-col><h2>{{ projectNoun }}leiter</h2></ion-col>\n          <ion-col><h2>Link zum {{ projectNoun }}</h2></ion-col>\n        </ion-row>\n        <ion-row color=\"items\" lines=\"none\" *ngFor=\"let leader of loadedLeaders\">\n          <ion-col>\n            <ion-label text-wrap color=\"text\">{{ leader.email }}</ion-label>\n          </ion-col>\n          <ion-col>\n            <ion-label color=\"text\">{{ leader.user_name }}</ion-label>\n          </ion-col>\n          <ion-col>\n            <a color=\"buttons\" *ngIf=\"leader.project_id != 0\" routerLink='../../{{ projectsNoun }}/{{ leader.project_id }}'>{{ leader.project_title }}</a>\n            <ion-icon color=\"danger\" name=\"trash\" *ngIf=\"leader.project_id == 0\" (click)=\"deleteLeader(leader.id)\"></ion-icon>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n  \n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-card-title>\n        Schüler sortieren\n      </ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text4\">\n      <ion-label color=\"text\">\n        {{ text4 }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <div class=\"ion-padding\" *ngIf=\"!sorted\">\n        <ion-button color=\"buttons\" [disabled]=\"!(currentDate > schedule.sort_students && currentDate <= schedule.exchange)\" (click)=\"createSortingProposal()\" expand=\"block\" class=\"ion-no-margin\" >Sortiervorschlag erstellen</ion-button>\n      </div>\n      <div class=\"ion-padding\" *ngIf=\"sorted\">\n        <ion-button color=\"buttons\" [disabled]=\"!(currentDate > schedule.sort_students && currentDate <= schedule.exchange)\" (click)=\"createSortingProposal()\" expand=\"block\" class=\"ion-no-margin\" >Neuen Sortiervorschlag erstellen</ion-button>\n      </div>\n      <div class=\"ion-padding\">\n        <ion-button color=\"buttons\" [disabled]=\"!(currentDate > schedule.sort_students && currentDate <= schedule.exchange)\" (click)=\"requestSortingProposal()\" expand=\"block\" class=\"ion-no-margin\" >aktuellen Sortiervorschlag ansehen</ion-button>\n      </div>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-card-title>\n        Vorschlag für Einsortierung der Schüler\n      </ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text5\">\n      <ion-label color=\"text\">\n        {{ text5 }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content *ngIf=\"sortedProjects.length\">\n      <ion-card color=\"background\" *ngFor=\"let project of sortedProjects\">\n        <ion-card-header>\n          <ion-card-title>\n            <ion-label *ngIf=\"project.participants.length < project.min_participants\" color=\"danger\">{{ project.title }} (Zu wenige Teilnehmer)</ion-label>\n            <ion-label *ngIf=\"project.participants.length > project.max_participants\" color=\"danger\">{{ project.title }} (Zu viele Teilnehmer)</ion-label>\n            <ion-label *ngIf=\"project.participants.length >= project.min_participants && project.participants.length <= project.max_participants\">{{ project.title }}</ion-label>\n          </ion-card-title>\n          <ion-card-subtitle>\n            <ion-label color=\"text\">{{ project.min_grade }}. bis {{ project.max_grade }}.Klasse | {{ project.min_participants }} bis {{ project.max_participants }} Teilnehmer | {{ project.leader_name }}</ion-label>\n          </ion-card-subtitle>\n        </ion-card-header>\n        <ion-card-content>\n          <div *ngIf=\"project.leader && project.leader_type === 'App\\\\Student'\">\n            <ion-item color=\"items\">\n              <ion-text color=\"text\"><ion-icon name=\"star\"></ion-icon> {{ project.leader.first_name }} {{ project.leader.last_name }} {{ project.leader.grade }}{{ project.leader.letter }}</ion-text>\n            </ion-item>\n          </div>\n          <div *ngIf=\"project.assistant_student_leaders.length\">\n            <ion-item color=\"items\" *ngFor=\"let assistant of project.assistant_student_leaders\">\n              <ion-text color=\"text\"><ion-icon name=\"star-half\"></ion-icon> {{ assistant.first_name }} {{ assistant.last_name }} {{ assistant.grade }}{{ assistant.letter }}</ion-text>\n            </ion-item>\n          </div>\n          <div *ngIf=\"project.participants.length\">\n            <ion-item color=\"items\" *ngFor=\"let participant of project.participants\">\n              <ion-text color=\"text\">{{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}</ion-text>\n              <ion-select slot=\"end\" name=\"ParticipantProject\" okText=\"Auswählen\" cancelText=\"Abbrechen\" type=\"number\" (ionChange)=\"moveParticipant($event)\"> \n                <ion-select-option *ngFor=\"let newProject of sortedProjects\" [value]=\"[participant, project.id, newProject.id]\">{{ newProject.title }} ({{ newProject.min_grade }}. - {{ newProject.max_grade }}.Klasse)</ion-select-option>\n              </ion-select>\n            </ion-item>\n          </div>\n        </ion-card-content>\n      </ion-card>\n    </ion-card-content>\n    <div class=\"ion-padding\">\n      <ion-button color=\"buttons\" (click)=\"editSortingProposal()\" expand=\"block\" class=\"ion-no-margin\" >Änderungen speichern</ion-button>\n    </div>\n    <div class=\"ion-padding\">\n      <ion-button color=\"buttons\" [disabled]=\"!sorted\" (click)=\"applySortingProposal()\" expand=\"block\" class=\"ion-no-margin\" >Vorschlag anwenden</ion-button>\n    </div>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminStudentsLeadersPage } from './admin-students-leaders.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminStudentsLeadersPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminStudentsLeadersPage]\n})\nexport class AdminStudentsLeadersPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { LeadersService } from 'src/app/services/leaders.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { AlertController } from '@ionic/angular';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { AdminsService } from 'src/app/services/admins.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Project } from 'src/models/Project.model';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { Time } from '@angular/common';\nimport { formatDate } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\nexport interface ModifiedSchüler {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  grade: number;\n  letter: string;\n  exchange_requests?: any[];\n  first_friend: number;\n  first_friend_name: string;\n  second_friend: number;\n  second_friend_name: string;\n  third_friend: number;\n  third_friend_name: string;\n  first_wish: number;\n  first_wish_title: string;\n  second_wish: number;\n  second_wish_title: string;\n  third_wish: number;\n  third_wish_title: string;\n  project_id: number;\n  project_title?: string;\n  role: number;\n}\n\nexport interface ModifiedProjektleiter {\n  id: number;\n  user_name: string;\n  email: string;\n  project_id: number;\n  project_title?: string;\n  email_verified_at?: Time;\n}\n\n@Component({\n  selector: 'app-admin-students-leaders',\n  templateUrl: './admin-students-leaders.page.html',\n  styleUrls: ['./admin-students-leaders.page.scss'],\n})\nexport class AdminStudentsLeadersPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  loadedProjects: Project[] = [];\n  loadedParticipantsNames: any[] = [];\n\n  sortedProjects: Project[] = [];\n  searchStudents: ModifiedSchüler[];\n  loadedStudents: ModifiedSchüler[] = [];\n  loadedLeaders: ModifiedProjektleiter[] = [];\n\n  sorted = false;\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  searchStudent = {\n    email: '',\n    first_name: '',\n    last_name: '',\n    class: ''\n  };\n  text1 = this.config.get_content_by_index('admin-students-leaders', 0);\n  text2 = this.config.get_content_by_index('admin-students-leaders', 1);\n  text3 = this.config.get_content_by_index('admin-students-leaders', 2);\n  text4 = this.config.get_content_by_index('admin-students-leaders', 3);\n  text5 = this.config.get_content_by_index('admin-students-leaders', 4);\n\n  page = 1;\n  lastPage = 1;\n\n  projectNoun = this.config.app_config.project_noun;\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private studentsService: StudentsService,\n              private scheduleService: ScheduleService,\n              private leadersService: LeadersService,\n              private projectsService: ProjectsService,\n              private activatedRoute: ActivatedRoute,\n              private alertCtrl: AlertController,\n              private adminsService: AdminsService,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.load();\n\n    this.subscriptions.push(\n      this.studentsService.update.subscribe(() => this.load()),\n      this.leadersService.update.subscribe(() => this.load()),\n      this.projectsService.update.subscribe(() => this.load())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  load() {\n    this.alert.loading(2000);\n\n    this.page = 1;\n\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n\n    this.getProjects();\n    this.getAllStudentNames();\n\n    if (this.currentDate > this.schedule.sort_students && this.currentDate <= this.schedule.exchange) {\n      this.requestSortingProposal();\n    }\n  }\n\n  eventHandler(keyCode) {\n    if (keyCode === 13) {\n      this.search();\n    }\n  }\n\n  search() {\n    // tslint:disable-next-line: triple-equals\n    if (this.searchStudent.email == '' && this.searchStudent.first_name == '' && this.searchStudent.last_name == '' && this.searchStudent.class == '') {\n      this.searchStudents = null;\n      return;\n    }\n    this.studentsService.getAllSearchedStudents(this.searchStudent).subscribe(data => {\n      this.searchStudents = [];\n      data.data.forEach(async student => {\n        const stu: ModifiedSchüler = {\n          id: 0,\n          email: '',\n          first_name: '',\n          last_name: '',\n          grade: 1,\n          letter: '',\n          first_friend: 0,\n          first_friend_name: '',\n          second_friend: 0,\n          second_friend_name: '',\n          third_friend: 0,\n          third_friend_name: '',\n          first_wish: 0,\n          first_wish_title: '',\n          second_wish: 0,\n          second_wish_title: '',\n          third_wish: 0,\n          third_wish_title: '',\n          project_id: 0,\n          project_title: 'kein Projekt',\n          role: 1\n        };\n\n        stu.id = student.id;\n        stu.email = student.email;\n        stu.first_name = student.first_name;\n        stu.last_name = student.last_name;\n        stu.grade = student.grade;\n        stu.letter = student.letter;\n        stu.first_friend = student.first_friend;\n        stu.second_friend = student.second_friend;\n        stu.third_friend = student.third_friend;\n        stu.first_wish = student.first_wish;\n        stu.second_wish = student.second_wish;\n        stu.third_wish = student.third_wish;\n        stu.project_id = student.project_id;\n        stu.role = student.role;\n\n        stu.first_friend_name = this.getParticipantName(stu.first_friend);\n        stu.second_friend_name = this.getParticipantName(stu.second_friend);\n        stu.third_friend_name = this.getParticipantName(stu.third_friend);\n\n        stu.first_wish_title = this.getProjectTitle(stu.first_wish);\n        stu.second_wish_title = this.getProjectTitle(stu.second_wish);\n        stu.third_wish_title = this.getProjectTitle(stu.third_wish);\n        stu.project_title = this.getProjectTitle(stu.project_id);\n\n        this.searchStudents.push(stu);\n      });\n    });\n  }\n\n  refresh() {\n    this.page = 1;\n    this.getProjects();\n    this.getAllStudentNames();\n  }\n\n  getProjects() {\n    this.projectsService.getAllProjects().subscribe(data => {\n      this.loadedProjects = data.data;\n      this.getStudents();\n      this.getLeaders();\n    });\n  }\n\n  getAllStudentNames() {\n    this.studentsService.getAllStudentNames().subscribe(data => {\n      this.loadedParticipantsNames = data.data;\n    });\n  }\n\n  getStudents() {\n    this.loadedStudents = [];\n    this.studentsService.getAllStudents(this.page).subscribe(data => {\n      this.lastPage = data.meta.last_page;\n      data.data.forEach(async student => {\n        const stu: ModifiedSchüler = {\n          id: 0,\n          email: '',\n          first_name: '',\n          last_name: '',\n          grade: 1,\n          letter: '',\n          first_friend: 0,\n          first_friend_name: '',\n          second_friend: 0,\n          second_friend_name: '',\n          third_friend: 0,\n          third_friend_name: '',\n          first_wish: 0,\n          first_wish_title: '',\n          second_wish: 0,\n          second_wish_title: '',\n          third_wish: 0,\n          third_wish_title: '',\n          project_id: 0,\n          project_title: 'kein Projekt',\n          role: 1\n        };\n\n        stu.id = student.id;\n        stu.email = student.email;\n        stu.first_name = student.first_name;\n        stu.last_name = student.last_name;\n        stu.grade = student.grade;\n        stu.letter = student.letter;\n        stu.first_friend = student.first_friend;\n        stu.second_friend = student.second_friend;\n        stu.third_friend = student.third_friend;\n        stu.first_wish = student.first_wish;\n        stu.second_wish = student.second_wish;\n        stu.third_wish = student.third_wish;\n        stu.project_id = student.project_id;\n        stu.role = student.role;\n\n        stu.first_friend_name = this.getParticipantName(stu.first_friend);\n        stu.second_friend_name = this.getParticipantName(stu.second_friend);\n        stu.third_friend_name = this.getParticipantName(stu.third_friend);\n\n        stu.first_wish_title = this.getProjectTitle(stu.first_wish);\n        stu.second_wish_title = this.getProjectTitle(stu.second_wish);\n        stu.third_wish_title = this.getProjectTitle(stu.third_wish);\n        stu.project_title = this.getProjectTitle(stu.project_id);\n\n        // await this.getWishNames(stu.first_wish, stu.second_wish, stu.third_wish, stu);\n\n        // await this.getFriendsNames(stu.first_friend, stu.second_friend, stu.third_friend, stu);\n\n        this.loadedStudents.push(stu);\n      });\n    });\n  }\n\n  getMoreStudents() {\n    this.alert.loading(2000);\n    this.page += 1;\n    this.studentsService.getAllStudents(this.page).subscribe(data => {\n      data.data.forEach(async student => {\n        const stu: ModifiedSchüler = {\n          id: 0,\n          email: '',\n          first_name: '',\n          last_name: '',\n          grade: 1,\n          letter: '',\n          first_friend: 0,\n          first_friend_name: '',\n          second_friend: 0,\n          second_friend_name: '',\n          third_friend: 0,\n          third_friend_name: '',\n          first_wish: 0,\n          first_wish_title: '',\n          second_wish: 0,\n          second_wish_title: '',\n          third_wish: 0,\n          third_wish_title: '',\n          project_id: 0,\n          project_title: 'kein Projekt',\n          role: 1\n        };\n\n        stu.id = student.id;\n        stu.email = student.email;\n        stu.first_name = student.first_name;\n        stu.last_name = student.last_name;\n        stu.grade = student.grade;\n        stu.letter = student.letter;\n        stu.first_friend = student.first_friend;\n        stu.second_friend = student.second_friend;\n        stu.third_friend = student.third_friend;\n        stu.first_wish = student.first_wish;\n        stu.second_wish = student.second_wish;\n        stu.third_wish = student.third_wish;\n        stu.project_id = student.project_id;\n        stu.role = student.role;\n\n        stu.first_friend_name = this.getParticipantName(stu.first_friend);\n        stu.second_friend_name = this.getParticipantName(stu.second_friend);\n        stu.third_friend_name = this.getParticipantName(stu.third_friend);\n\n        stu.first_wish_title = this.getProjectTitle(stu.first_wish);\n        stu.second_wish_title = this.getProjectTitle(stu.second_wish);\n        stu.third_wish_title = this.getProjectTitle(stu.third_wish);\n        stu.project_title = this.getProjectTitle(stu.project_id);\n\n        this.loadedStudents.push(stu);\n      });\n    });\n  }\n\n  getLeaders() {\n    this.loadedLeaders = [];\n    this.leadersService.getAllLeaders().subscribe(data => {\n      data.data.forEach(leader => {\n        const lea: ModifiedProjektleiter = {\n          id: 0,\n          user_name: '',\n          email: '',\n          project_id: 0,\n          project_title: 'kein Projekt'\n        };\n\n        lea.id = leader.id;\n        lea.user_name = leader.user_name;\n        lea.email = leader.email;\n        lea.project_id = leader.project_id;\n\n        lea.project_title = this.getProjectTitle(lea.project_id);\n\n        this.loadedLeaders.push(lea);\n      });\n    });\n  }\n\n  getProjectTitle(projectID) {\n    if (projectID !== 0 && this.loadedProjects) {\n      const searchedProject = this.loadedProjects.filter(\n        project => project.id === projectID);\n      if (searchedProject[0] != null) {\n        return searchedProject[0].title;\n      } else {\n        return 'fehlerhaftes Projekt';\n      }\n    } else {\n      return 'kein Projekt';\n    }\n  }\n\n  getParticipantName(participantID) {\n    if (participantID !== 0 && this.loadedParticipantsNames) {\n      const searchedParticipant = this.loadedParticipantsNames.filter(\n        participant => participant.id === participantID);\n      if (searchedParticipant[0] != null) {\n        return searchedParticipant[0].first_name + ' ' + searchedParticipant[0].last_name;\n      } else {\n        return 'fehlerhafter Freund';\n      }\n    } else {\n      return '';\n    }\n  }\n\n  deleteLeader(leaderID) {\n    this.alertCtrl.create({\n      header: 'Sind Sie sicher?',\n      message: 'Wollen Sie diesen Projektleiter wirklich unwiederruflich löschen?',\n      buttons: [{\n        text: 'Abbrechen',\n        role: 'cancel',\n      }, {\n        text: 'Löschen',\n        handler: () => {\n          this.leadersService.deleteLeader(leaderID);\n        }\n      }]\n    }).then(alertEl => {\n      alertEl.present();\n    });\n  }\n\n  createSortingProposal() {\n    this.adminsService.createSortingProposal().subscribe(data => {\n      this.alert.alert(data.message);\n      this.sorted = true;\n      this.sortedProjects = data.data;\n    // tslint:disable-next-line: no-shadowed-variable\n    }, error => {\n      this.alert.error('Sortierung der Schüler fehlgeschlagen.', error.error);\n    });\n  }\n\n  requestSortingProposal() {\n    this.adminsService.requestSortingProposal().subscribe(data => {\n      this.sortedProjects = data.data;\n      this.sorted = true;\n    // tslint:disable-next-line: no-shadowed-variable\n    }, error => {\n      this.alert.error('Es konnte kein Sortiervorschlag gefunden werden.', error.error);\n    });\n  }\n\n  moveParticipant(event) {\n    const participant = event.detail.value[0];\n    const oldProjectId = event.detail.value[1];\n    const newProjectId = event.detail.value[2];\n\n    if (oldProjectId !== 0 && this.sortedProjects) {\n      const searchedProject = this.sortedProjects.filter(\n        project => project.id === oldProjectId);\n      if (searchedProject[0] != null) {\n        const oldProject = searchedProject[0];\n\n        const index = oldProject.participants.indexOf(participant);\n        if (index !== -1) {\n          oldProject.participants.splice(index, 1);\n        }\n      }\n    }\n\n    if (newProjectId !== 0 && this.sortedProjects) {\n      const searchedProject = this.sortedProjects.filter(\n        project => project.id === newProjectId);\n      if (searchedProject[0] != null) {\n        const newProject = searchedProject[0];\n\n        if (participant) {\n          newProject.participants.push(participant);\n        }\n      }\n    }\n  }\n\n  editSortingProposal() {\n    const newProposal = {\n      data: this.sortedProjects\n    };\n    this.adminsService.editSortingProposal(newProposal);\n    // this.requestSortingProposal();\n    this.sorted = true;\n  }\n\n  applySortingProposal() {\n    if (this.sorted === true) {\n      this.alertCtrl.create({\n        header: 'Sind Sie sicher?',\n        message: 'Wollen Sie die vorgeschlagene Konfiguration wirklich anwenden?',\n        buttons: [{\n          text: 'Abbrechen',\n          role: 'cancel'\n        }, {\n          text: 'Anwenden',\n          handler: () => {\n            this.adminsService.applySortingProposal();\n            this.sorted = false;\n            this.refresh();\n          }\n        }]\n      }).then(alertEl => {\n        alertEl.present();\n      });\n    }\n  }\n\n}\n"]}