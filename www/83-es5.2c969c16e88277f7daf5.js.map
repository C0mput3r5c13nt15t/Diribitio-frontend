{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","this","ionRouteDataChanged","url","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","split","map","trim","writeNavState","async","root","chain","direction","index","changed","animation","outlet","searchNavNode","componentOnReady","route","setRouteId","id","params","result","element","markVisible","console","error","e","QUERY","matches","querySelector","routeRedirect","routes","find","input","from","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","segment","data","next","slice","mergeParams","a","b","assign","routerPathToChain","chains","match","matchedChain","score","computePriority","level","pow","f","shift","readRedirects","Array","children","el","tagName","to","readProp","readRoutes","flattenRouterTree","readRouteNodes","node","component","Error","componentProps","beforeLeave","beforeEnter","prop","hasAttribute","getAttribute","nodes","flattenNode","push","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","debug","document","body","Promise","resolve","window","addEventListener","once","onRoutesChanged","onRedirectChanged","bind","historyDirection","getPath","runGuards","canProceed","redirect","writeNavStateRoot","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","queryString","setPath","history","waitPromise","group","forEach","r","groupEnd","redirects","warn","getRouteId","maxMatches","plainIDs","param","safeWriteNavState","win","replaceState","title","redirectFrom","lock","unlock","p","toChain","fromChain","beforeEnterHook","beforeLeaveHook","canLeave","canEnter","routeEvent","routeChangeEvent","pushState","loc","hash","prefix","redirectFromPath","redirectedFrom","RouterLink","routerDirection","onClick","routerAnimation","mode","attrs","rel","target","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { e as debounce } from './helpers-5c745fbd.js';\nimport { o as openURL, c as createColorClasses } from './theme-5641d27f.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n    const path = segments\n        .filter(s => s.length > 0)\n        .join('/');\n    return '/' + path;\n};\nconst chainToPath = (chain) => {\n    const path = [];\n    for (const route of chain) {\n        for (const segment of route.path) {\n            if (segment[0] === ':') {\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                path.push(param);\n            }\n            else if (segment !== '') {\n                path.push(segment);\n            }\n        }\n    }\n    return path;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n    let url = generatePath([\n        ...parsePath(root),\n        ...path\n    ]);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url = url + '?' + queryString;\n    }\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\nconst removePrefix = (prefix, path) => {\n    if (prefix.length > path.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return path;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n            return null;\n        }\n    }\n    if (path.length === prefix.length) {\n        return [''];\n    }\n    return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n    let pathname = loc.pathname;\n    if (useHash) {\n        const hash = loc.hash;\n        pathname = (hash[0] === '#')\n            ? hash.slice(1)\n            : '';\n    }\n    const prefix = parsePath(root);\n    const path = parsePath(pathname);\n    return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n    if (path == null) {\n        return [''];\n    }\n    const removeQueryString = path.split('?')[0];\n    const segments = removeQueryString.split('/')\n        .map(s => s.trim())\n        .filter(s => s.length > 0);\n    if (segments.length === 0) {\n        return [''];\n    }\n    else {\n        return segments;\n    }\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const path = [];\n        chain.forEach(r => path.push(...r.path));\n        const ids = chain.map(r => r.id);\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await outlet.componentOnReady();\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // tslint:disable-next-line:no-constant-condition\n    while (true) {\n        outlet = searchNavNode(node);\n        if (outlet) {\n            const id = await outlet.getRouteId();\n            if (id) {\n                node = id.element;\n                id.element = undefined;\n                ids.push(id);\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise(resolve => {\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\n    });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(QUERY)) {\n        return root;\n    }\n    const outlet = root.querySelector(QUERY);\n    return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n    const { from, to } = route;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > input.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== input[i]) {\n            return false;\n        }\n    }\n    return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n    return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let i = 0;\n    for (; i < len; i++) {\n        if (ids[i].toLowerCase() !== chain[i].id) {\n            break;\n        }\n    }\n    return i;\n};\nconst matchesPath = (inputPath, chain) => {\n    const segments = new RouterSegments(inputPath);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const path = chain[i].path;\n        if (path[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of path) {\n                const data = segments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = (matchesDefault)\n        ? matchesDefault === (segments.next() === '')\n        : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, allparams[i])\n        }));\n    }\n    return chain;\n};\nconst mergeParams = (a, b) => {\n    if (!a && b) {\n        return b;\n    }\n    else if (a && !b) {\n        return a;\n    }\n    else if (a && b) {\n        return Object.assign(Object.assign({}, a), b);\n    }\n    return undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    const plainIDs = ids.map(i => i.id);\n    for (const chain of chains) {\n        const score = matchesIDs(plainIDs, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, ids[i] && ids[i].params)\n        }));\n    }\n    return null;\n};\nconst routerPathToChain = (path, chains) => {\n    let match = null;\n    let matches = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesPath(path, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > matches) {\n                matches = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const path of route.path) {\n            if (path[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (path !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(path) {\n        this.path = path.slice();\n    }\n    next() {\n        if (this.path.length > 0) {\n            return this.path.shift();\n        }\n        return '';\n    }\n}\n\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map(el => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')),\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n    return Array.from(node.children)\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n        .map(el => {\n        const component = readProp(el, 'component');\n        if (component == null) {\n            throw new Error('component missing in ion-route');\n        }\n        return {\n            path: parsePath(readProp(el, 'url')),\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(root, el)\n        };\n    });\n};\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\nconst flattenRouterTree = (nodes) => {\n    const routes = [];\n    for (const node of nodes) {\n        flattenNode([], routes, node);\n    }\n    return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n    const s = chain.slice();\n    s.push({\n        id: node.id,\n        path: node.path,\n        params: node.params,\n        beforeLeave: node.beforeLeave,\n        beforeEnter: node.beforeEnter\n    });\n    if (node.children.length === 0) {\n        routes.push(s);\n        return;\n    }\n    for (const sub of node.children) {\n        flattenNode(s, routes, sub);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let path = this.getPath();\n        const canProceed = await this.runGuards(path);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                path = parsePath(canProceed.redirect);\n            }\n            return false;\n        }\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, processNextHandler => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    async push(url, direction = 'forward', animation) {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        let path = parsePath(url);\n        let queryString = url.split('?')[1];\n        const canProceed = await this.runGuards(path);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                path = parsePath(canProceed.redirect);\n                queryString = canProceed.redirect.split('?')[1];\n            }\n            else {\n                return false;\n            }\n        }\n        this.setPath(path, direction, queryString);\n        return this.writeNavStateRoot(path, direction, animation);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction, animation) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const toChain = routerPathToChain(to, routes);\n        const fromChain = routerPathToChain(from, routes);\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\n        if (canEnter === false || typeof canEnter === 'object') {\n            return canEnter;\n        }\n        return true;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction, queryString) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true\n            }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}