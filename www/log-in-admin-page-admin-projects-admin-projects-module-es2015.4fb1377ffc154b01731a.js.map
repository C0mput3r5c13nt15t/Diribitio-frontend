{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-projects/admin-projects.page.html","webpack:///src/app/log-in/admin-page/admin-projects/admin-projects.module.ts","webpack:///src/app/log-in/admin-page/admin-projects/admin-projects.page.ts"],"names":["routes","path","component","AdminProjectsPage","projectsService","activatedRoute","config","subscriptions","imageUrl","this","backend_config","projectsNoun","app_config","projects_noun","eventName","event_name","text","get_content","paramMap","subscribe","adminUrl","get","getProjects","push","update","forEach","sub","unsubscribe","getAllProjects","data","projects","AdminProjectsPageModule","forChild"],"mappings":"0QAcI,2BACE,sBACE,QACF,OACF,Q,oBAFI,8B,wBAOI,qB,uCAA8D,yC,yBAI9D,YAA0C,QAAmB,Q,8BAAnB,uB,sBAC1C,sBAAkE,+BAAmB,Q,6DAPzF,qBACE,uBACE,2BACF,OACA,sBACE,aAAI,QAAmB,OACvB,oBACA,4BACF,OACF,Q,yBAT8D,kCAChD,kDACD,gDAGL,sBACD,2CACO,4CCnBtB,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCAG,M,MAAMC,EAgBX,YAAoBC,EACAC,EACAC,GAFA,KAAAF,kBACA,KAAAC,iBACA,KAAAC,SAjBZ,KAAAC,cAAgC,GAQxC,KAAAC,SAAWC,KAAKH,OAAOI,eAAeF,SACtC,KAAAG,aAAeF,KAAKH,OAAOM,WAAWC,cAItC,KAAAC,UAAYL,KAAKH,OAAOM,WAAWG,WAMnC,WACEN,KAAKO,KAAOP,KAAKH,OAAOW,YAAY,kBAEpCR,KAAKJ,eAAea,SAASC,UAAUD,IACrCT,KAAKW,SAAWF,EAASG,IAAI,eAG/BZ,KAAKa,cAELb,KAAKF,cAAcgB,KACjBd,KAAKL,gBAAgBoB,OAAOL,UAAU,IAAMV,KAAKa,gBAOrD,cACEb,KAAKF,cAAckB,QAAQC,GAAOA,EAAIC,eAGxC,cACElB,KAAKL,gBAAgBwB,iBAAiBT,UAAUU,IAC9CpB,KAAKqB,SAAWD,EAAKA,Q,6CA3Cd1B,GAAiB,gC,uBAAjBA,EAAiB,idFZ9B,qBACE,wBACE,uBACE,4BACF,OACA,oBAAW,QAAkB,OAC/B,OACF,OAEA,wBACE,qBACE,0BACE,yBAAgB,SAAkB,OACpC,OACA,oCAKA,4BACE,oBACE,4BAUF,OACF,OACF,OACF,Q,MA/ByC,mEAE1B,6BAOO,6BAEA,4BAOe,qC,kHET9B,KDaA,Y,MAAM4B,G,8BAAAA,I,oDAAAA,IAAuB,SARzB,CACP,IACA,IACA,IACA,IAAaC,SAAShC,O,GAInB","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>{{ projectsNoun }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" class=\"content\">\n    <ion-card-header>\n      <ion-card-title>{{ projectsNoun }}</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-list>\n        <ion-item color=\"background\" *ngFor=\"let project of projects\" [routerLink]=\"['./', project.id]\">\n          <ion-avatar [hidden]=\"project.image == null || project.image == ''\" slot=\"start\">\n            <ion-img *ngIf=\"project.image != '' && project.image != null\" src='{{ imageUrl }}{{ project.image }}'></ion-img>\n          </ion-avatar>\n          <ion-label color=\"text\">\n            <h2>{{ project.title }}</h2>\n            <p *ngIf=\"!!+project.authorized === true\">{{ project.descr }}</p>\n            <ion-text *ngIf=\"!!+project.authorized === false\" color=\"danger\"> (Nicht zugelassen!)</ion-text>\n          </ion-label>\n        </ion-item>\n      </ion-list>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminProjectsPage } from './admin-projects.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminProjectsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminProjectsPage]\n})\nexport class AdminProjectsPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from 'src/models/Project.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-projects',\n  templateUrl: './admin-projects.page.html',\n  styleUrls: ['./admin-projects.page.scss'],\n})\nexport class AdminProjectsPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  projects: Project[];\n\n  text: string;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private projectsService: ProjectsService,\n              private activatedRoute: ActivatedRoute,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('admin-projects');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.getProjects();\n\n    this.subscriptions.push(\n      this.projectsService.update.subscribe(() => this.getProjects())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getProjects() {\n    this.projectsService.getAllProjects().subscribe(data => {\n      this.projects = data.data;\n    });\n  }\n\n}\n"]}