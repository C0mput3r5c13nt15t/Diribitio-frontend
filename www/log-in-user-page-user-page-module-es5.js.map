{"version":3,"sources":["webpack:///src/app/log-in/user-page/user-page.page.html","webpack:///src/app/log-in/user-page/user-page.module.ts","webpack:///src/app/log-in/user-page/user-page.page.scss","webpack:///src/app/log-in/user-page/user-page.page.ts"],"names":["routes","path","component","UserPagePageModule","imports","forChild","declarations","UserPagePage","activatedRoute","router","exchangesService","participantsService","projectsService","scheduleService","config","alert","loadedUser","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","schedule","begin","control","registration","sort_students","exchange","projects","end","buttonPressed","projectNoun","app_config","project_noun","studentsCanCreateProjects","students_can_create_projects","text","get_content","currentDate","Date","paramMap","subscribe","has","navigate","getSchedule","data","getStudent","update","getSelfParticipant","getAllExchangesForParticipant","requestData","email_verified_at","logOutParticipant","sendAuthentificationEmailSubscribe","message","error","selector","template","providers"],"mappings":"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","file":"log-in-user-page-user-page-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"menu\\\">\\n    <ion-title>Schüler</ion-title>\\n    <ion-button color=\\\"buttons\\\" slot=\\\"end\\\" (click)=\\\"logout()\\\">\\n      <ion-icon name=\\\"log-out\\\"></ion-icon>\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content color=\\\"background\\\">\\n  <ion-card color=\\\"background\\\"class=\\\"content\\\">\\n    <ion-card-header>\\n      <ion-item color=\\\"items\\\" lines=\\\"none\\\">\\n        <ion-card-title><ion-label color=\\\"buttons\\\">Wilkommen {{ loadedUser.user_name }}</ion-label></ion-card-title>\\n        <ion-button (click)=\\\"refresh()\\\" slot=\\\"end\\\" color=\\\"buttons\\\"><ion-icon name=\\\"refresh\\\"></ion-icon></ion-button>\\n      </ion-item>\\n    </ion-card-header>\\n    <ion-card-content *ngIf=\\\"text\\\">\\n      <ion-label color=\\\"text\\\">\\n        {{ text }}\\n      </ion-label>\\n    </ion-card-content>\\n    <ion-card-content *ngIf=\\\"loadedUser.email_verified_at == null && !buttonPressed\\\">\\n      <ion-label color=\\\"text\\\">\\n        Sie heaben ihre E-Mail noch nicht verifiziert. Bitte holen sie dies nach bevor sie fortfahren.\\n      </ion-label>\\n      <div class=\\\"ion-padding\\\">\\n        <ion-button color=\\\"buttons\\\" expand=\\\"block\\\" class=\\\"ion-no-margin\\\" (click)=\\\"sendVerificationEmail()\\\">E-Mail senden</ion-button>\\n      </div>\\n    </ion-card-content>\\n    <ion-card-content>\\n      <ion-list>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.registration && currentDate <= schedule.sort_students\\\" [routerLink]=\\\"['./Anmeldung']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"log-in\\\"></ion-icon>Anmeldedaten eingeben\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedUser.role === 1 && loadedUser.project_id != 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\\\" [routerLink]=\\\"['./Tauschanfrage senden']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"send\\\"></ion-icon>Tauschanfragen senden\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedUser.role === 1 && loadedUser.exchange_requests.length > 0 && loadedUser.project_id != 0 && loadedUser.exchange_id == 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\\\" [routerLink]=\\\"['./Tauschanfrage bestätigen']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"swap-horizontal\\\"></ion-icon>Tauschanfrage bestätigen\\n          <ion-badge color=\\\"buttons\\\" slot=\\\"end\\\">{{ loadedUser.exchange_requests.length }}</ion-badge>\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedUser.role === 1 && loadedUser.project_id != 0\\\" routerLink='./{{ projectNoun }}'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"people\\\"></ion-icon>{{ projectNoun }} einsehen\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.begin && currentDate <= schedule.control && loadedUser.project_id == 0 && loadedUser.role === 1 && studentsCanCreateProjects\\\" routerLink='./{{ projectNoun }} erstellen'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"create\\\"></ion-icon>{{ projectNoun }} erstellen\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedUser.role === 2 && loadedUser.project_id != 0 && studentsCanCreateProjects\\\" routerLink='./{{ projectNoun }} verwalten'>\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"construct\\\"></ion-icon>{{ projectNoun }} verwalten\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"currentDate > schedule.begin && currentDate <= schedule.control && loadedUser.role === 2 && loadedUser.project_id != 0 && studentsCanCreateProjects\\\" [routerLink]=\\\"['./Assistenten verwalten']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"construct\\\"></ion-icon>Assistenten verwalten\\n        </ion-item>\\n        <ion-item [disabled]=\\\"loadedUser.email_verified_at == null\\\" color=\\\"items\\\" *ngIf=\\\"loadedUser.role === 2 && loadedUser.project_id != 0 && studentsCanCreateProjects\\\" [routerLink]=\\\"['./Nachricht senden']\\\">\\n          <ion-icon color=\\\"text\\\" slot=\\\"start\\\" name=\\\"send\\\"></ion-icon>Nachricht senden\\n        </ion-item>\\n      </ion-list>\\n      <div class=\\\"ion-padding\\\">\\n        <ion-button color=\\\"buttons\\\" expand=\\\"block\\\" class=\\\"ion-no-margin\\\" (click)=\\\"logout()\\\">Abmelden</ion-button>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UserPagePage } from './user-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserPagePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UserPagePage]\n})\nexport class UserPagePageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZy1pbi91c2VyLXBhZ2UvdXNlci1wYWdlLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { ParticipantsService } from 'src/app/participants.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ExchangesService } from 'src/app/exchanges.service';\nimport { DatePipe } from '@angular/common';\nimport {formatDate} from '@angular/common';\nimport { Zeitplan } from 'src/assets/models/Zeitplan';\nimport { Schüler } from 'src/assets/models/Schüler.model';\nimport { ConfigService } from 'src/app/config.service';\nimport { ScheduleService } from 'src/app/schedule.service';\nimport { ProjectsService } from 'src/app/projects.service';\nimport { AlertService } from 'src/app/alert.service';\n\n@Component({\n  selector: 'app-user-page',\n  templateUrl: './user-page.page.html',\n  styleUrls: ['./user-page.page.scss'],\n  providers: [DatePipe]\n})\nexport class UserPagePage implements OnInit {\n  loadedUser: Schüler = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n\n  schedule: Zeitplan = {\n    id: 1,\n    begin: null,\n    control: null,\n    registration: null,\n    sort_students: null,\n    exchange: null,\n    projects: null,\n    end: null\n  };\n\n  currentDate: any;\n\n  text: string;\n\n  buttonPressed = true;\n\n  projectNoun = this.config.app_config.project_noun;\n\n  studentsCanCreateProjects = this.config.app_config.students_can_create_projects;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private exchangesService: ExchangesService,\n              private participantsService: ParticipantsService,\n              private projectsService: ProjectsService,\n              private scheduleService: ScheduleService,\n              private config: ConfigService,\n              private alert: AlertService) {}\n\n  ngOnInit() {\n    this.text = this.config.get_content('user-page');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n    });\n\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n\n    this.getStudent();\n    this.participantsService.update.subscribe(() => this.getStudent());\n    this.projectsService.update.subscribe(() => this.getStudent());\n  }\n\n  getStudent() {\n    this.participantsService.getSelfParticipant().subscribe(data => {\n      this.loadedUser = data.data;\n      this.loadedUser.exchange_requests = [];\n      if (this.currentDate > this.schedule.exchange && this.currentDate <= this.schedule.projects) {\n        this.exchangesService.getAllExchangesForParticipant().subscribe(requestData => {\n          this.loadedUser.exchange_requests = requestData.data;\n        });\n      }\n      if (this.loadedUser.email_verified_at == null) {\n        this.buttonPressed = false;\n      }\n    });\n  }\n\n  refresh() {\n    this.getStudent();\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  logout() {\n    this.participantsService.logOutParticipant();\n  }\n\n  sendVerificationEmail() {\n    this.participantsService.sendAuthentificationEmailSubscribe().subscribe(data => {\n      this.alert.alert(data.message);\n      this.buttonPressed = true;\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n"]}