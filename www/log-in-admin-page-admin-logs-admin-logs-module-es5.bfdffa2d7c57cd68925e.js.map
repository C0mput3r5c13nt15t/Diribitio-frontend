{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-logs/admin-logs.page.html","webpack:///src/app/log-in/admin-page/admin-logs/admin-logs.module.ts","webpack:///src/app/log-in/admin-page/admin-logs/admin-logs.page.ts"],"names":["AdminLogsPage","AdminLogsPageModule","routes","path","component","activatedRoute","scheduleService","adminsService","alertCtrl","alert","config","subscriptions","SignUpEmails","SignUpEmail","id","email","email_confirmation","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","eventName","this","app_config","event_name","text","get_content","currentDate","paramMap","subscribe","adminUrl","get","getSchedule","getSignUpemails","push","update","forEach","sub","unsubscribe","data","getAllSignUpEmails","form","createSignUpEmail","message","reset","emit","error","emailID","create","header","buttons","role","handler","filter","filterEmail","deleteSignUpEmail","then","alertEl","present","postSignUpEmail","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Appverwaltung</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-card-title>E-Mails für Admin-Accounts verwalten</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content *ngIf=\"SignUpEmails.length\">\n      <ion-item color=\"items\" lines=\"none\" *ngFor=\"let SignUpEmail of SignUpEmails\">\n        <ion-card color=\"background\">\n          <ion-card-content>\n            <ion-text color=\"text\">{{ SignUpEmail.email }}</ion-text>\n          </ion-card-content>\n        </ion-card>\n        <ion-buttons (click)=\"deleteSignUpEmail(SignUpEmail.id)\"><ion-icon color=\"danger\" name=\"close\"></ion-icon></ion-buttons>\n      </ion-item>\n    </ion-card-content>\n    <ion-card-content>\n      <form #signUpEmail=\"ngForm\" name=\"SignUpEmailForm\" (ngSubmit)=\"postSignUpEmail(signUpEmail)\" class=\"content\">\n        <ion-card color=\"background\"color=\"background\">\n          <ion-card-content>\n            <ion-list>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" [(ngModel)]=\"SignUpEmail.email\" name=\"Email\" placeholder=\"E-Mail\" required type=\"email\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" [(ngModel)]=\"SignUpEmail.email_confirmation\" name=\"Email\" placeholder=\"E-Mail-Bestätigung\" required type=\"email\"></ion-input>\n              </ion-item>\n            </ion-list>\n            <div class=\"ion-padding\">\n              <ion-button color=\"buttons\" [disabled]=\"signUpEmail.invalid || currentDate <= schedule.begin && currentDate > schedule.sort_students\" expand=\"block\" type=\"submit\" class=\"ion-no-margin\">Freigeben</ion-button>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </form>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminLogsPage } from './admin-logs.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminLogsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminLogsPage]\n})\nexport class AdminLogsPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { formatDate } from '@angular/common';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { AdminsService } from 'src/app/services/admins.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { AlertController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-logs',\n  templateUrl: './admin-logs.page.html',\n  styleUrls: ['./admin-logs.page.scss'],\n})\nexport class AdminLogsPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  SignUpEmails: any[] = [];\n  SignUpEmail = {\n    id: 0,\n    email: '',\n    email_confirmation: ''\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  text: string;\n\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private scheduleService: ScheduleService,\n              private adminsService: AdminsService,\n              private alertCtrl: AlertController,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('admin-logs');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.getSchedule();\n    this.getSignUpemails();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.adminsService.update.subscribe(() => this.getSignUpemails()),\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getSignUpemails() {\n    this.adminsService.getAllSignUpEmails().subscribe(data => {\n      this.SignUpEmails = data.data;\n    });\n  }\n\n  postSignUpEmail(form) {\n    this.adminsService.createSignUpEmail(this.SignUpEmail).subscribe(data => {\n      this.SignUpEmails.push(data.data);\n      this.alert.alert(data.message);\n      form.reset();\n      this.adminsService.update.emit();\n    }, error => {\n      this.alert.error('Freigeben der E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  deleteSignUpEmail(emailID) {\n    this.alertCtrl.create({\n      header: 'Sind Sie sicher?',\n      message: 'Wollen Sie diese E-Mail wirklich sperren?',\n      buttons: [{\n        text: 'Abbrechen',\n        role: 'cancel',\n      }, {\n        text: 'Sperren',\n        handler: () => {\n          if (this.SignUpEmail.email === this.SignUpEmail.email_confirmation) {\n            this.SignUpEmails = this.SignUpEmails.filter(filterEmail => {\n              return emailID !== filterEmail.id;\n            });\n            this.adminsService.deleteSignUpEmail(emailID);\n          } else {\n            this.alert.error('Die angegebenen E-Mails stimmen nicht überein.');\n          }\n        }\n      }]\n    }).then(alertEl => {\n      alertEl.present();\n    });\n  }\n\n}\n"]}