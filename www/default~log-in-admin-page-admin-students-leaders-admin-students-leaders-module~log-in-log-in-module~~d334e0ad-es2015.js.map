{"version":3,"sources":["./src/app/services/students.service.ts"],"names":[],"mappings":"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","file":"default~log-in-admin-page-admin-students-leaders-admin-students-leaders-module~log-in-log-in-module~~d334e0ad-es2015.js","sourcesContent":["import { Injectable, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the students\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentsService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) {}\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Creates a new student account\n   * @param signUpData Contains the credentials for the account creation\n   * @param form Contains the form to be resetted after the creation\n   */\n  signUpStudent(signUpData, form) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'students/register', signUpData, options).subscribe(data => {\n      if (data.token) {\n        this.auth.set_jwt(data.token);\n        this.auth.setLoggedIn(true);\n        this.router.navigate([this.eventName + '/Anmeldung']);\n      }\n      this.alert.alert('Dein Account wurde erfolgreich erstellt!');\n      this.sendAuthentificationEmail();\n      this.update.emit();\n      form.reset();\n    }, error => {\n      this.alert.error('Erstellung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the student associated with the provided token\n   */\n  sendAuthentificationEmail() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    this.http.post<Response>(this.backendUrl + 'students/email/resend', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Sends the authentification email to the student associated with the provided token (same as before)\n   * @returns RequestObservable\n   */\n  sendAuthentificationEmailSubscribe() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/email/resend', null, options);\n  }\n\n  /**\n   * Logs in as student with the given credentials\n   * @param loginData Contains the credentials to be used (email and password)\n   * @returns RequestObservable\n   */\n  logInStudent(loginData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/login', loginData, options);\n  }\n\n  /**\n   * Logs out the student associated with the provided token\n   */\n  logOutStudent() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/logout', null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.auth.setLoggedIn(false);\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Logout fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Gets the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfStudent() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/self', options);\n  }\n\n  /**\n   * Gets the id of an given student\n   * @param studentData Contains the student\n   * @returns RequestObservable\n   */\n  getStudentID(studentData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.post<Response>(this.backendUrl + 'students/id', studentData, options);\n  }\n\n  /**\n   * Gets all names of all students\n   * @returns RequestObservable\n   */\n  getAllStudentNames() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/little_index_students', options);\n  }\n\n  /**\n   * Gets all students of the given page\n   * @param page Contains the number of the page\n   * @returns RequestObservable\n   */\n  getAllStudents(page: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/index_students?page=' + page, options);\n  }\n\n  /**\n   * Gets all students that are relevant for the search\n   * @param searchValue Contains a string value of the search\n   * @returns RequestObservable\n   */\n  getAllSearchedStudents(searchValue) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      search_value: searchValue\n    };\n    return this.http.post<Response>(this.backendUrl + 'admins/search_index_students', sendData, options);\n  }\n\n  /**\n   * Gets all friends of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getFriends() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/friends', options);\n  }\n\n  /**\n   * Makes the student with the given id a assistant leader in the project of the student associated\n   *              with the provided token\n   * @param studentID Contains the id of the student to be promoted\n   */\n  promoteStudent(studentID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/promote_student/' + studentID, null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Ernennung des Assistenten fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Suspends the assistent leader with the given id as assistant leader in the project of the student\n   *              associated with the provided token\n   * @param assistentID Contains the id of the assistent leader to be suspended\n   */\n  suspendStudent(assistentID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/suspend_student/' + assistentID, null, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Suspendierung des Assistenten fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Removes the assistant leader role of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  quitAssistant() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    return this.http.put<Response>(this.backendUrl + 'students/quit_assistant', null, options);\n  }\n\n  /**\n   * Updates the student associated with the provided token\n   * @param studentData Contains the updated student\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  putSelfStudent(studentData, backUrl: string) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n\n    const options = { headers };\n    this.http.put<Response>(this.backendUrl + 'students/self_update', studentData, options).subscribe(() => {\n      this.alert.alert('Der Account wurde erfolgreich aktualisiert!');\n      this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Accounts fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n"],"sourceRoot":"webpack:///"}