{"version":3,"sources":["webpack:///src/app/log-in/student-page/student-messages/student-messages.page.html","webpack:///src/app/log-in/student-page/student-messages/student-messages.module.ts","webpack:///src/app/log-in/student-page/student-messages/student-messages.page.ts"],"names":["routes","path","component","StudentMessagesPage","activatedRoute","router","alert","projectsService","studentsService","messagesService","config","subscriptions","leadedProject","id","authorized","editable","title","image","descr","leader_name","leader_id","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","messages","participants","loadedStudent","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","newMessage","message","eventName","this","app_config","event_name","paramMap","subscribe","has","studentUrl","get","navigate","getProject","getStudent","push","update","forEach","sub","unsubscribe","getSelfStudent","data","getSelfLeadedProject","valid","createMessage","emit","error","reset","filter","filterMessage","deleteMessage","send","StudentMessagesPageModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/SchÃ¼ler/{{ studentUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Notizen</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-list class=\"content\" *ngIf=\"leadedProject.messages.length\">\n    <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of leadedProject.messages\">\n      <ion-buttons slot=\"end\" (click)=\"delete(message)\" *ngIf=\"message.sender_name == loadedStudent.user_name\"><ion-icon color=\"danger\" name=\"close\"></ion-icon></ion-buttons>\n      <ion-card class=\"message sended_message\" slot=\"end\" color=\"background\" *ngIf=\"message.sender_name == loadedStudent.user_name\">\n        <ion-card-content>\n          <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n          <ion-text color=\"text\">{{ message.message }}</ion-text>\n        </ion-card-content>\n      </ion-card>\n      <ion-card class=\"message\" slot=\"start\" color=\"background\" *ngIf=\"message.sender_name != loadedStudent.user_name\">\n        <ion-card-content>\n          <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n          <ion-text color=\"text\">{{ message.message }}</ion-text>\n        </ion-card-content>\n      </ion-card>\n      <ion-buttons slot=\"start\" (click)=\"delete(message)\" *ngIf=\"message.sender_name != loadedStudent.user_name\"><ion-icon color=\"danger\" name=\"close\"></ion-icon></ion-buttons>\n    </ion-item>\n  </ion-list>\n  <ion-card color=\"background\"name=\"MessageBox\" class=\"content\">\n    <form id=\"Formular\" #form=\"ngForm\" name=\"MessageForm\" (ngSubmit)=\"send(form)\">\n      <ion-item color=\"items\">\n        <ion-input color=\"text\" required name=\"MessageText\" [(ngModel)]=\"newMessage.message\" type=\"text\"></ion-input>\n      </ion-item>\n      <div class=\"ion-padding\">\n        <ion-button color=\"buttons\" [disabled]=\"form.invalid\" type=\"submit\" expand=\"block\" class=\"ion-no-margin\"><ion-label><ion-icon name=\"duplicate\"></ion-icon> Notiz an das Projekt anheften</ion-label></ion-button>\n      </div>\n    </form>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { StudentMessagesPage } from './student-messages.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentMessagesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [StudentMessagesPage]\n})\nexport class StudentMessagesPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { MessagesService } from 'src/app/services/messages.service';\nimport { Student } from 'src/models/Student.model';\nimport { Project } from 'src/models/Project.model';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './student-messages.page.html',\n  styleUrls: ['./student-messages.page.scss'],\n})\nexport class StudentMessagesPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  studentUrl: string;\n\n  leadedProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_id: 0,\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    messages: [],\n    participants: []\n  };\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 2\n  };\n\n  newMessage: any = {\n    project_id: 0,\n    message: ''\n  };\n\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private alert: AlertService,\n              private projectsService: ProjectsService,\n              private studentsService: StudentsService,\n              private messagesService: MessagesService,\n              private config: ConfigService) {}\n\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.studentUrl = paramMap.get('ParticipantName');\n    });\n\n    this.getProject();\n    this.getStudent();\n\n    this.subscriptions.push(\n      this.messagesService.update.subscribe(() => this.getProject()),\n      this.messagesService.update.subscribe(() => this.getStudent())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getStudent() {\n    this.studentsService.getSelfStudent().subscribe(data => {\n      this.loadedStudent = data.data;\n    });\n  }\n\n  getProject() {\n    this.projectsService.getSelfLeadedProject('students').subscribe(data => {\n      this.leadedProject = data.data;\n    });\n  }\n\n  send(message) {\n    if (message.valid === true) {\n      this.messagesService.createMessage('students', this.newMessage).subscribe(data => {\n        this.messagesService.update.emit();\n        this.leadedProject.messages.push(data.data);\n      }, error => {\n        this.alert.error('Versandt der Nachricht fehlgeschlagen!', error.error);\n      });\n      message.reset();\n    }\n  }\n\n  delete(message) {\n    this.leadedProject.messages = this.leadedProject.messages.filter(filterMessage => {\n      return message.id !== filterMessage.id;\n    });\n    this.messagesService.deleteMessage('students', message.id);\n  }\n\n}\n"]}