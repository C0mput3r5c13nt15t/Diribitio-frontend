{"version":3,"sources":["webpack:///src/app/log-in/leader-page/leader-project-administration/leader-project-administration.page.html","webpack:///src/app/log-in/leader-page/leader-project-administration/leader-project-administration.module.ts","webpack:///src/app/log-in/leader-page/leader-project-administration/leader-project-administration.page.ts"],"names":["routes","path","component","LeaderProjectAdministrationPage","activatedRoute","router","scheduleService","projectsService","config","subscriptions","loadedLeader","id","user_name","email","password","project_id","leadedProject","authorized","editable","title","image","descr","leader_name","leader_id","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","messages","participants","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","imageUrl","this","backend_config","projectNoun","app_config","project_noun","eventName","event_name","leaderLoadingProject","get_error","leaderWrongTime","currentDate","paramMap","subscribe","has","leaderUrl","get","navigate","getSchedule","data","getProject","push","update","forEach","sub","unsubscribe","getSelfLeadedProject","LeaderProjectAdministrationPageModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/{{ projectNoun}}leiter/{{ leaderUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>{{ projectNoun }}</ion-title>\n    <ion-button *ngIf=\" !!+leadedProject.editable == false || currentDate <= this.schedule.control || currentDate > this.schedule.registration\" [disabled]=\"currentDate <= this.schedule.begin || currentDate > this.schedule.control\" color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">\n      <ion-icon name=\"create\"></ion-icon>\n    </ion-button>\n    <ion-button *ngIf=\"currentDate > this.schedule.control && currentDate <= this.schedule.registration && !!+leadedProject.editable == true\" color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">\n      <ion-icon name=\"create\"></ion-icon>\n    </ion-button>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" *ngIf=\"leadedProject.leader_id == null && leadedProject.title == null && leadedProject.authorized == null\" class=\"content\">\n    <ion-card-content>\n      <ion-text color=\"danger\">{{ leaderLoadingProject }}</ion-text>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\" *ngIf=\"!!+loadedLeader.project_id != null\" class=\"content\">\n    <ion-img *ngIf=\"leadedProject.image != '' && leadedProject.image != null\" src='{{ imageUrl }}{{ leadedProject.image }}'></ion-img>\n    <ion-card-header>\n      <ion-card-title>{{ leadedProject.title }}</ion-card-title>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-item-group>\n        <ion-item color=\"items\" lines=\"none\" class=\"descr\">\n          <ion-text color=\"text\">{{ leadedProject.descr }}</ion-text>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Leiter</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ leadedProject.leader_name }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Kosten</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ leadedProject.cost }}â‚¬</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Zeitraum</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">1.Tag:  {{ leadedProject.first_day_begin }} bis {{ leadedProject.first_day_end }}</ion-label>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">2.Tag:  {{ leadedProject.second_day_begin }} bis {{ leadedProject.second_day_end }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Klassenstufe</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ leadedProject.min_grade }}. bis {{ leadedProject.max_grade }}.Klasse</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teinehmeranzahl</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">von {{ leadedProject.min_participants }} bis {{ leadedProject.max_participants }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Notizen</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"leadedProject.messages.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of leadedProject.messages\">\n            <ion-card class=\"message\" color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n                <ion-text color=\"text\">{{ message.message }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teilnehmer</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"leadedProject.participants.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let participant of leadedProject.participants\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\">{{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <div class=\"ion-padding\">\n          <ion-button color=\"buttons\" *ngIf=\" !!+leadedProject.editable == false || currentDate <= this.schedule.control || currentDate > this.schedule.registration\" [disabled]=\"currentDate <= this.schedule.begin || currentDate > this.schedule.control\" expand=\"block\" class=\"ion-no-margin\"  color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">{{ projectNoun }} bearbeiten</ion-button>\n          <ion-button color=\"buttons\" *ngIf=\"currentDate > this.schedule.control && currentDate <= this.schedule.registration && !!+leadedProject.editable == true\" expand=\"block\" class=\"ion-no-margin\"  color=\"buttons\" routerLink='./{{ projectNoun }} bearbeiten' slot=\"end\">{{ projectNoun }} nachbessern</ion-button>\n          <ion-text *ngIf=\"currentDate <= this.schedule.begin && !!+leadedProject.editable == false || currentDate > this.schedule.control && !!+leadedProject.editable == false\" color=\"text\">{{ leaderWrongTime }}</ion-text>\n        </div>\n      </ion-item-group>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LeaderProjectAdministrationPage } from './leader-project-administration.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LeaderProjectAdministrationPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LeaderProjectAdministrationPage]\n})\nexport class LeaderProjectAdministrationPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { Projectleader } from 'src/models/Projectleader';\nimport { Project } from 'src/models/Project.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { formatDate } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-project-administration',\n  templateUrl: './leader-project-administration.page.html',\n  styleUrls: ['./leader-project-administration.page.scss'],\n})\nexport class LeaderProjectAdministrationPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  leaderUrl: string;\n\n  loadedLeader: Projectleader = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    project_id: 0,\n  };\n\n  leadedProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_id: 0,\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    messages: [],\n    participants: []\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  leaderLoadingProject: string;\n  leaderWrongTime: string;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private scheduleService: ScheduleService,\n              private projectsService: ProjectsService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.leaderLoadingProject = this.config.get_error('leader-loading_project');\n    this.leaderWrongTime = this.config.get_error('leader-wrong_time');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('LeaderName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.leaderUrl = paramMap.get('LeaderName');\n    });\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n\n    this.getProject();\n\n    this.subscriptions.push(\n      this.projectsService.update.subscribe(() => this.getProject()),\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getProject() {\n    this.projectsService.getSelfLeadedProject('leaders').subscribe(data => {\n      this.leadedProject = data.data;\n    });\n  }\n\n}\n"]}