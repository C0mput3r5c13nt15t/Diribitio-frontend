{"version":3,"sources":["webpack:///src/app/log-in/reset-password/reset-password.page.html","webpack:///src/app/log-in/reset-password/reset-password.module.ts","webpack:///src/app/log-in/reset-password/reset-password.page.ts"],"names":["ResetPasswordPage","ResetPasswordPageModule","routes","path","component","activatedRoute","router","config","auth","alert","subscriptions","formType","resetPasswordStudent","token","email","user_type","password","password_confirmation","resetPasswordLeader","resetPasswordAdmin","projectNoun","this","app_config","project_noun","eventName","event_name","text","get_content","paramMap","subscribe","has","snapshot","get","navigate","forEach","sub","unsubscribe","keyCode","type","form","resetStudentPassword","resetLeaderPassword","resetAdminPassword","nextInput","setFocus","resetPassword","data","message","reset","error","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar>\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Anmeldung\"></ion-back-button>\n    </ion-button>\n    <ion-title>Passwort ändern</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header color=\"background\">\n      <ion-card-title>Passwort ändern</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-segment color=\"buttons\" [(ngModel)]=\"formType\">\n        <ion-segment-button value=\"student\">\n          <ion-label>Schüler</ion-label>\n        </ion-segment-button>\n        <ion-segment-button value=\"leader\">\n          <ion-label>{{ projectNoun }}leiter</ion-label>\n        </ion-segment-button>\n        <ion-segment-button value=\"admin\">\n          <ion-label>Admin</ion-label>\n        </ion-segment-button>\n      </ion-segment>\n\n      <form #studentResetPassword=\"ngForm\" name=\"LogInForm\" (ngSubmit)=\"resetStudentPassword(studentResetPassword)\" [hidden]=\"formType != 'student'\" class=\"content\">\n        <ion-card color=\"background\">\n          <ion-card-header>\n            <ion-card-title>Schüler</ion-card-title>\n          </ion-card-header>\n          <ion-card-content>\n            <ion-list>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" [(ngModel)]=\"resetPasswordStudent.email\" name=\"email\" placeholder=\"E-Mail\" required type=\"text\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password\" required [(ngModel)]=\"resetPasswordStudent.password\" placeholder=\"Passwort\" type=\"password\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password_confirmation\" required [(ngModel)]=\"resetPasswordStudent.password_confirmation\" placeholder=\"Passwort bestätigen\" type=\"password\"></ion-input>\n              </ion-item>\n            </ion-list>\n            <div class=\"ion-padding\">\n              <ion-button name=\"login\" type=\"submit\" [disabled]=\"studentResetPassword.invalid\" class=\"ion-no-margin\" expand=\"block\" color=\"buttons\">Passwort ändern</ion-button>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </form>\n\n      <form #leaderResetPassword=\"ngForm\" name=\"LogInForm\" (ngSubmit)=\"resetLeaderPassword(leaderResetPassword)\" [hidden]=\"formType != 'leader'\" class=\"content\">\n        <ion-card color=\"background\">\n          <ion-card-header>\n            <ion-card-title>{{ projectNoun }}leiter</ion-card-title>\n          </ion-card-header>\n          <ion-card-content>\n            <ion-list>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" [(ngModel)]=\"resetPasswordLeader.email\" name=\"email\" placeholder=\"E-Mail\" required type=\"text\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password\" required [(ngModel)]=\"resetPasswordLeader.password\" placeholder=\"Passwort\" type=\"password\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password_confirmation\" required [(ngModel)]=\"resetPasswordLeader.password_confirmation\" placeholder=\"Passwort bestätigen\" type=\"password\"></ion-input>\n              </ion-item>\n            </ion-list>\n            <div class=\"ion-padding\">\n              <ion-button name=\"login\" type=\"submit\" [disabled]=\"leaderResetPassword.invalid\" class=\"ion-no-margin\" expand=\"block\" color=\"buttons\">Passwort ändern</ion-button>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </form>\n\n      <form #adminResetPassword=\"ngForm\" name=\"LogInForm\" (ngSubmit)=\"resetAdminPassword(adminResetPassword)\" [hidden]=\"formType != 'admin'\" class=\"content\">\n        <ion-card color=\"background\">\n          <ion-card-header>\n            <ion-card-title>Admins</ion-card-title>\n          </ion-card-header>\n          <ion-card-content>\n            <ion-list>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" [(ngModel)]=\"resetPasswordAdmin.email\" name=\"email\" placeholder=\"E-Mail\" required type=\"text\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password\" required [(ngModel)]=\"resetPasswordAdmin.password\" placeholder=\"Passwort\" type=\"password\"></ion-input>\n              </ion-item>\n              <ion-item color=\"items\">\n                <ion-input color=\"text\" minlength=\"8\" name=\"password_confirmation\" required [(ngModel)]=\"resetPasswordAdmin.password_confirmation\" placeholder=\"Passwort bestätigen\" type=\"password\"></ion-input>\n              </ion-item>\n            </ion-list>\n            <div class=\"ion-padding\">\n              <ion-button name=\"login\" type=\"submit\" [disabled]=\"adminResetPassword.invalid\" class=\"ion-no-margin\" expand=\"block\" color=\"buttons\">Passwort ändern</ion-button>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </form>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ResetPasswordPage]\n})\nexport class ResetPasswordPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n})\nexport class ResetPasswordPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  formType = 'student';\n\n  resetPasswordStudent = {\n    token: '',\n    email: '',\n    user_type: 'students',\n    password: '',\n    password_confirmation: ''\n  };\n\n  resetPasswordLeader = {\n    token: '',\n    email: '',\n    user_type: 'leaders',\n    password: '',\n    password_confirmation: ''\n  };\n\n  resetPasswordAdmin = {\n    token: '',\n    email: '',\n    user_type: 'admins',\n    password: '',\n    password_confirmation: ''\n  };\n\n  text: string;\n\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private config: ConfigService,\n              private auth: AuthenticationService,\n              private alert: AlertService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('reset-password');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (paramMap.has('ResetToken')) {\n        this.resetPasswordAdmin.token = this.activatedRoute.snapshot.paramMap.get('ResetToken');\n        this.resetPasswordLeader.token = this.activatedRoute.snapshot.paramMap.get('ResetToken');\n        this.resetPasswordStudent.token = this.activatedRoute.snapshot.paramMap.get('ResetToken');\n      } else {\n        this.router.navigate([this.eventName + '/Anmeldung']);\n      }\n    });\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  eventHandler(keyCode, type= 'students', form) {\n    if (keyCode === 13) {\n      if (type === 'students') {\n        this.resetStudentPassword(form);\n      } else if (type === 'leaders') {\n        this.resetLeaderPassword(form);\n      } else if (type === 'admins') {\n        this.resetAdminPassword(form);\n      }\n    }\n  }\n\n  /**\n   * Sets the focus on the given element if ENTER is pressed\n   * @param keyCode Contains the code of the pressed key\n   * @param nextInput Contains the next element to be focused\n   */\n  nextInput(keyCode, nextInput) {\n    if (keyCode === 13) {\n      nextInput.setFocus();\n    }\n  }\n\n  resetStudentPassword(form) {\n    this.auth.resetPassword(this.resetPasswordStudent).subscribe(data => {\n      this.alert.alert(data.message);\n      form.reset();\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Zurücksetzen des Passworts fehlgeschalgen!', error.error);\n    });\n  }\n\n  resetLeaderPassword(form) {\n    this.auth.resetPassword(this.resetPasswordLeader).subscribe(data => {\n      this.alert.alert(data.message);\n      form.reset();\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Zurücksetzen des Passworts fehlgeschalgen!', error.error);\n    });\n  }\n\n  resetAdminPassword(form) {\n    this.auth.resetPassword(this.resetPasswordAdmin).subscribe(data => {\n      this.alert.alert(data.message);\n      form.reset();\n      this.router.navigate([this.eventName + '/Anmeldung']);\n    }, error => {\n      this.alert.error('Zurücksetzen des Passworts fehlgeschalgen!', error.error);\n    });\n  }\n\n}\n"]}