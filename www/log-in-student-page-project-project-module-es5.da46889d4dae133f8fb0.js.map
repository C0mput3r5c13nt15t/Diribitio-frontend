{"version":3,"sources":["webpack:///src/app/log-in/student-page/project/project.page.html","webpack:///src/app/log-in/student-page/project/project.module.ts","webpack:///src/app/log-in/student-page/project/project.page.ts"],"names":["ProjectPage","ProjectPageModule","routes","path","component","activatedRoute","router","projectsService","config","subscriptions","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","chosenProject","authorized","editable","title","image","descr","leader_name","leader_type","leader_id","messages","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","participants","assistant_student_leaders","imageUrl","this","backend_config","projectNoun","app_config","project_noun","eventName","event_name","studentLoadingProject","get_error","studentProjectNotAllowed","paramMap","subscribe","has","navigate","getProject","push","update","forEach","sub","unsubscribe","getSelfProject","data","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Schüler/{{ studentUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>{{ projectNoun }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" *ngIf=\"chosenProject.leader_id == null && chosenProject.title == null && chosenProject.authorized == null\"  class=\"content\">\n    <ion-card-content>\n      <ion-text color=\"danger\">{{ studentLoadingProject }}</ion-text>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\" *ngIf=\"!!+chosenProject.authorized === true\" class=\"content\">\n    <ion-img *ngIf=\"chosenProject.image != '' && chosenProject.image != null\" src='{{ imageUrl }}{{ chosenProject.image }}'></ion-img>\n    <ion-card-header>\n      <ion-card-title text-wrap>{{ chosenProject.title }}</ion-card-title>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-item-group>\n        <ion-item color=\"items\" lines=\"none\" class=\"descr\">\n          <ion-text color=\"text\">{{ chosenProject.descr }}</ion-text>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Leiter</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ chosenProject.leader_name }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Kosten</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ chosenProject.cost }}€</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Zeitraum</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">1.Tag: {{ chosenProject.first_day_begin }} bis {{ chosenProject.first_day_end }}</ion-label>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">2.Tag: {{ chosenProject.second_day_begin }} bis {{ chosenProject.second_day_end }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Klassenstufe</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ chosenProject.min_grade }}. bis {{ chosenProject.max_grade }}.Klasse</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teinehmeranzahl</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">von {{ chosenProject.min_participants }} bis {{ chosenProject.max_participants }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\" *ngIf=\"chosenProject.messages.length\">\n          <ion-label color=\"text\">Notizen</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"chosenProject.messages.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of chosenProject.messages\">\n            <ion-card class=\"message\" color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n                <ion-text color=\"text\">{{ message.message }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teilnehmer</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"chosenProject.leader && chosenProject.leader_type === 'App\\\\Student'\">\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\"><ion-icon name=\"star\"></ion-icon> {{ chosenProject.leader.first_name }} {{ chosenProject.leader.last_name }} {{ chosenProject.leader.grade }}{{ chosenProject.leader.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <div *ngIf=\"chosenProject.assistant_student_leaders.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let assistant of chosenProject.assistant_student_leaders\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\"><ion-icon name=\"star-half\"></ion-icon> {{ assistant.first_name }} {{ assistant.last_name }} {{ assistant.grade }}{{ assistant.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <div *ngIf=\"chosenProject.participants.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let participant of chosenProject.participants\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\">{{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n      </ion-item-group>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\" *ngIf=\"!!+chosenProject.authorized == false\"  class=\"content\">\n    <ion-card-content>\n      <ion-text color=\"danger\">{{ studentProjectNotAllowed }}</ion-text>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProjectPage } from './project.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProjectPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ProjectPage]\n})\nexport class ProjectPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { Student } from 'src/models/Student.model';\nimport { Project } from 'src/models/Project.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.page.html',\n  styleUrls: ['./project.page.scss'],\n})\nexport class ProjectPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  studentUrl: string;\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n\n  chosenProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_type: '',\n    leader_id: 0,\n    messages: [],\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    participants: [],\n    assistant_student_leaders: []\n  };\n\n  studentLoadingProject: string;\n  studentProjectNotAllowed: string;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private projectsService: ProjectsService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.studentLoadingProject = this.config.get_error('student-loading_project');\n    this.studentProjectNotAllowed = this.config.get_error('student-project_not_allowed');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n    });\n\n    this.getProject();\n\n    this.subscriptions.push(\n      this.projectsService.update.subscribe(() => this.getProject()),\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getProject() {\n    this.projectsService.getSelfProject().subscribe(data => {\n      this.chosenProject = data.data;\n    });\n  }\n\n}\n"]}