{"version":3,"sources":["webpack:///src/app/services/projects.service.ts"],"names":["ProjectsService","http","auth","alert","config","router","update","backendUrl","backend_config","url","projectNoun","app_config","project_noun","eventName","event_name","headers","options","get","projectID","Authorization","jwt","baseUrl","projectData","image","formData","FormData","append","title","descr","leader_name","cost","first_day_begin","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","post","authorized","sendData","put","subscribe","data","message","emit","error","editable","backUrl","navigate","providedIn"],"mappings":"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","file":"default~log-in-admin-page-admin-exchanges-admin-exchange-detail-admin-exchange-detail-module~log-in-~9ad3215d-es5.js","sourcesContent":["import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthenticationService } from './authentication.service';\nimport { AlertService } from './alert.service';\nimport { ConfigService } from './config.service';\nimport { Response } from 'src/models/Response.model';\nimport { Router } from '@angular/router';\n\n/**\n * This service handles all request to the backend having to do with the projects\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectsService {\n  /**\n   * The update event is emitted after every major successful request\n   */\n  @Output() update = new EventEmitter();\n  Data;\n\n  constructor(private http: HttpClient,\n              private auth: AuthenticationService,\n              private alert: AlertService,\n              private config: ConfigService,\n              private router: Router) { }\n\n  /**\n   * The url to the backend\n   */\n  backendUrl = this.config.backend_config.url;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  /**\n   * Gets all projects\n   * @returns RequestObservable\n   */\n  getAllProjects() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects', options);\n  }\n\n  /**\n   * Gets the project with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects/' + projectID, options);\n  }\n\n  /**\n   * Gets some of the project data with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getLittleProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'projects/show_little/' + projectID, options);\n  }\n\n  /**\n   * Gets the project data available to an admin with the given id\n   * @param projectID Contains the id of the project\n   * @returns RequestObservable\n   */\n  getProjectAdmin(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'admins/project/' + projectID, options);\n  }\n\n  /**\n   * Gets the project of the student associated with the provided token\n   * @returns RequestObservable\n   */\n  getSelfProject() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + 'students/project', options);\n  }\n\n  /**\n   * Gets the leaded project of the student or leader associated with the provided token\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @returns RequestObservable\n   */\n  getSelfLeadedProject(baseUrl= 'students') {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    return this.http.get<Response>(this.backendUrl + baseUrl + '/leaded_project', options);\n  }\n\n  /**\n   * Creates a new project\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project\n   * @param image Contains the image of the new project\n   * @returns RequestObservable\n   */\n  createProject(baseUrl= 'students', projectData, image= null) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    const formData = new FormData();\n    formData.append('title', projectData.title);\n    formData.append('image', image);\n    formData.append('descr', projectData.descr);\n    formData.append('leader_name', projectData.leader_name);\n    formData.append('cost', projectData.cost);\n    formData.append('first_day_begin', projectData.first_day_begin);\n    formData.append('first_day_end', projectData.first_day_end);\n    formData.append('second_day_begin', projectData.second_day_begin);\n    formData.append('second_day_end', projectData.second_day_end);\n    formData.append('min_grade', projectData.min_grade);\n    formData.append('max_grade', projectData.max_grade);\n    formData.append('min_participants', projectData.min_participants);\n    formData.append('max_participants', projectData.max_participants);\n\n    return this.http.post<Response>(this.backendUrl + baseUrl + '/store_project', formData, options);\n  }\n\n  /**\n   * Updates the authorization of the project with the given id\n   * @param projectID Contains the id of the project to be un-/auhorized\n   * @param authorized Contains the new value for authorized\n   */\n  toogleAuthorizedProject(projectID: number, authorized: boolean) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      authorized\n    };\n    this.http.put<Response>(this.backendUrl + 'admins/toogle_authorized/' + projectID, sendData, options).subscribe(data => {\n      if (data) {\n        this.alert.alert(data.message);\n      }\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the editability of the project with the given id\n   * @param projectID Contains the id of the project to be un-/editable\n   * @param editable Contains the new value for editable\n   */\n  toogleEditableProject(projectID: number, editable: boolean) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    const sendData = {\n      editable\n    };\n    this.http.put<Response>(this.backendUrl + 'admins/toogle_editable/' + projectID, sendData, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the project of the student/leader associated with the provided token\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project data\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  putProject(baseUrl= 'students', projectData, backUrl: string) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    this.http.put<Response>(this.backendUrl + baseUrl + '/update_project', projectData, options).subscribe(data => {\n      this.alert.alert(data.message);\n\n      if (baseUrl === 'students') {\n        this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      } else {\n        this.router.navigate([this.eventName + '/' + this.projectNoun + 'leiter/' + backUrl]);\n      }\n\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Updates the project of the student/leader associated with the provided token even after the actual\n   *              deadline if ediatble allows it\n   * @param baseUrl Contains for which type of user accout this request is (students or leaders)\n   * @param projectData Contains the new project data\n   * @param backUrl Contains the url that the user should be navigated to after a successful update\n   */\n  touchUpProject(baseUrl= 'students', projectData, backUrl) {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n\n    this.http.put<Response>(this.backendUrl + baseUrl + '/touch_up_project', projectData, options).subscribe(data => {\n      this.alert.alert(data.message);\n\n      if (baseUrl === 'students') {\n        this.router.navigate([this.eventName + '/Schüler/' + backUrl]);\n      } else {\n        this.router.navigate([this.eventName + '/' + this.projectNoun + 'leiter/' + backUrl]);\n      }\n\n      this.update.emit();\n    }, error => {\n      this.alert.error('Aktualisierung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n\n  /**\n   * Deletes the project with the given id\n   * @param projectID Contains the id of the project to be deleted\n   */\n  deleteProject(projectID: number) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.auth.jwt,\n    });\n    const options = { headers };\n    this.http.delete<Response>(this.backendUrl + 'admins/destroy_project/' + projectID, options).subscribe(data => {\n      this.alert.alert(data.message);\n      this.update.emit();\n    }, error => {\n      this.alert.error('Löschung des Projektes fehlgeschlagen!', error.error);\n    });\n  }\n}\n"]}