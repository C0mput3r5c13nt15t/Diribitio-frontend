{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.page.html","webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.module.ts","webpack:///src/app/log-in/admin-page/admin-schedule/admin-schedule.page.ts"],"names":["routes","path","component","AdminSchedulePage","activatedRoute","scheduleService","router","alert","config","subscriptions","schedule","id","begin","Date","control","registration","sort_students","exchange","projects","end","maxDate","setFullYear","getFullYear","toISOString","projectsNoun","this","app_config","projects_noun","eventName","event_name","text","get_content","currentDate","paramMap","subscribe","adminUrl","get","getSchedule","push","update","forEach","sub","unsubscribe","data","putSchedule","message","emit","navigate","error","manageSchedule","AdminSchedulePageModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Zeitplan verwalten</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <form #form=\"ngForm\" name=\"ParticipantForm\" (ngSubmit)=\"manageSchedule()\">\n    <ion-card color=\"background\" class=\"content\">\n      <ion-card-header>\n        <ion-card-title>Zeitplan</ion-card-title>\n      </ion-card-header>\n      <ion-card-content *ngIf=\"text\">\n        <ion-label color=\"text\">\n          {{ text }}\n        </ion-label>\n      </ion-card-content>\n      <ion-card-content>\n        <ion-list>\n          <ion-item color=\"items\" lines=\"none\">\n            ab <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Beginn\" [(ngModel)]=\"schedule.begin\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.begin && currentDate <= schedule.control\">\n            <ion-icon slot=\"start\" name=\"create\"></ion-icon>\n            <ion-label>Registrierung und Erstellung der {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.begin || currentDate > schedule.control\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"create\"></ion-icon>\n            <ion-label color=\"text\">Registrierung und Erstellung der {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" name=\"Kontrolle\" [(ngModel)]=\"schedule.control\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.control && currentDate <= schedule.registration\">\n            <ion-icon slot=\"start\" name=\"shield-checkmark\"></ion-icon>\n            <ion-label>Kontrolle und Freigabe der {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.control || currentDate > schedule.registration\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"shield-checkmark\"></ion-icon>\n            <ion-label color=\"text\">Kontrolle und Freigabe der {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Anmeldung\" [(ngModel)]=\"schedule.registration\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.registration && currentDate <= schedule.sort_students\">\n            <ion-icon slot=\"start\" name=\"log-in\"></ion-icon>\n            <ion-label>Anmeldung für die {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.registration || currentDate > schedule.sort_students\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"log-in\"></ion-icon>\n            <ion-label color=\"text\">Anmeldung für die {{ projectsNoun }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Sortierung\" [(ngModel)]=\"schedule.sort_students\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.sort_students && currentDate <= schedule.exchange\">\n            <ion-icon slot=\"start\" name=\"funnel\"></ion-icon>\n            <ion-label>Sortierung durch den Algorithmus</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.sort_students || currentDate > schedule.exchange\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"funnel\"></ion-icon>\n            <ion-label color=\"text\">Sortierung durch den Algorithmus</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Tausch\" [(ngModel)]=\"schedule.exchange\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.exchange && currentDate <= schedule.projects\">\n            <ion-icon slot=\"start\" name=\"swap-horizontal\"></ion-icon>\n            <ion-label>Tauschphase</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.exchange || currentDate > schedule.projects\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"swap-horizontal\"></ion-icon>\n            <ion-label color=\"text\">Tauschphase</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis <ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Projekte\" [(ngModel)]=\"schedule.projects\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n          <ion-item color=\"buttons\" lines=\"none\" *ngIf=\"currentDate > schedule.projects && currentDate <= schedule.end\">\n            <ion-icon slot=\"start\" name=\"flag\"></ion-icon>\n            <ion-label>{{ eventName }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\" *ngIf=\"currentDate <= schedule.projects || currentDate > schedule.end\">\n            <ion-icon color=\"text\" slot=\"start\" name=\"flag\"></ion-icon>\n            <ion-label color=\"text\">{{ eventName }}</ion-label>\n          </ion-item>\n          <ion-item color=\"items\" lines=\"none\">\n            bis<ion-datetime [max]=\"maxDate\" displayFormat=\"DD.MM.YYYY\" placeholder=\"Bitte ein Datum wählen\" required name=\"Ende\" [(ngModel)]=\"schedule.end\" picker-format=\"YYYY-MM-DD\" monthShortNames='Jan, Feb, März, Apr, Mai, Jun, Jul, Aug, Sept, Okt, Nov, Dez' cancelText=\"Abbrechen\" doneText=\"Ok\"></ion-datetime>\n          </ion-item>\n        </ion-list>\n        <div class=\"ion-padding\">\n          <ion-button color=\"buttons\" [disabled]=\"form.invalid\" expand=\"block\" type=\"submit\" class=\"ion-no-margin\">Zeitplan bestätigen</ion-button>\n        </div>\n      </ion-card-content>\n    </ion-card>\n  </form>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminSchedulePage } from './admin-schedule.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminSchedulePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminSchedulePage]\n})\nexport class AdminSchedulePageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { formatDate } from '@angular/common';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-schedule',\n  templateUrl: './admin-schedule.page.html',\n  styleUrls: ['./admin-schedule.page.scss'],\n})\nexport class AdminSchedulePage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n  /**\n   * Contains the max date to be inputted in yyyy-MM-dd format (1 year from today)\n   */\n  maxDate: any = new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString();\n\n  text: string;\n\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private scheduleService: ScheduleService,\n              private router: Router,\n              private alert: AlertService,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('admin-schedule');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      this.adminUrl = paramMap.get('AdminName');\n    });\n\n    this.getSchedule();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  manageSchedule() {\n    this.schedule.begin = formatDate(this.schedule.begin, 'yyyy-MM-dd', 'en');\n    this.schedule.control = formatDate(this.schedule.control, 'yyyy-MM-dd', 'en');\n    this.schedule.registration = formatDate(this.schedule.registration, 'yyyy-MM-dd', 'en');\n    this.schedule.sort_students = formatDate(this.schedule.sort_students, 'yyyy-MM-dd', 'en');\n    this.schedule.exchange = formatDate(this.schedule.exchange, 'yyyy-MM-dd', 'en');\n    this.schedule.projects = formatDate(this.schedule.projects, 'yyyy-MM-dd', 'en');\n    this.schedule.end = formatDate(this.schedule.end, 'yyyy-MM-dd', 'en');\n\n    this.scheduleService.putSchedule(this.schedule).subscribe(data => {\n      this.alert.alert(data.message);\n      this.scheduleService.update.emit();\n      this.router.navigate([this.eventName + '/Admin/' + this.adminUrl]);\n    }, error => {\n      this.alert.error('Aktualisierung des Zeitplans fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n"]}