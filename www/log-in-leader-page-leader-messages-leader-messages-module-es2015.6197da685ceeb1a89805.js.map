{"version":3,"sources":["webpack:///src/app/log-in/leader-page/leader-messages/leader-messages.page.html","webpack:///src/app/log-in/leader-page/leader-messages/leader-messages.module.ts","webpack:///src/app/log-in/leader-page/leader-messages/leader-messages.page.ts"],"names":["routes","path","component","LeaderMessagesPage","activatedRoute","router","alert","projectsService","leadersService","messagesService","config","subscriptions","loadedLeader","id","user_name","email","password","project_id","leadedProject","authorized","editable","title","image","descr","leader_name","leader_id","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","messages","participants","newMessage","message","projectNoun","this","app_config","project_noun","eventName","event_name","paramMap","subscribe","has","leaderUrl","get","navigate","getProject","getLeader","push","update","forEach","sub","unsubscribe","getSelfLeader","data","getSelfLeadedProject","valid","createMessage","emit","error","reset","Message","filter","deleteMessage","send","LeaderMessagesPageModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/{{ projectNoun }}leiter/{{ leaderUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Notizen</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-list class=\"content\" *ngIf=\"leadedProject.messages.length\">\n    <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of leadedProject.messages\">\n      <ion-buttons slot=\"end\" (click)=\"delete(message)\" *ngIf=\"message.sender_name == loadedLeader.user_name\"><ion-icon color=\"danger\" name=\"close\"></ion-icon></ion-buttons>\n      <ion-card class=\"message sended_message\" slot=\"end\" color=\"background\" *ngIf=\"message.sender_name == loadedLeader.user_name\">\n        <ion-card-content>\n          <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n          <ion-text color=\"text\">{{ message.message }}</ion-text>\n        </ion-card-content>\n      </ion-card>\n      <ion-card class=\"message\" slot=\"start\" color=\"background\" *ngIf=\"message.sender_name != loadedLeader.user_name\">\n        <ion-card-content>\n          <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n          <ion-text color=\"text\">{{ message.message }}</ion-text>\n        </ion-card-content>\n      </ion-card>\n      <ion-buttons slot=\"start\" (click)=\"delete(message)\" *ngIf=\"message.sender_name != loadedLeader.user_name\"><ion-icon color=\"danger\" name=\"close\"></ion-icon></ion-buttons>\n    </ion-item>\n  </ion-list>\n  <ion-card color=\"background\"name=\"MessageBox\" class=\"content\">\n    <form id=\"Formular\" #form=\"ngForm\" name=\"MessageForm\" (ngSubmit)=\"send(form)\">\n      <ion-item color=\"items\">\n        <ion-input color=\"text\" required name=\"MessageText\" [(ngModel)]=\"newMessage.message\" type=\"text\"></ion-input>\n      </ion-item>\n      <div class=\"ion-padding\">\n        <ion-button color=\"buttons\" [disabled]=\"form.invalid\" type=\"submit\" expand=\"block\" class=\"ion-no-margin\"><ion-label><ion-icon name=\"duplicate\"></ion-icon> Notiz an das Projekt anheften</ion-label></ion-button>\n      </div>\n    </form>\n  </ion-card>\n</ion-content>\n  \n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LeaderMessagesPage } from './leader-messages.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LeaderMessagesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LeaderMessagesPage]\n})\nexport class LeaderMessagesPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { MessagesService } from 'src/app/services/messages.service';\nimport { Projectleader } from 'src/models/Projectleader';\nimport { Project } from 'src/models/Project.model';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Subscription } from 'rxjs';\nimport { LeadersService } from 'src/app/services/leaders.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './leader-messages.page.html',\n  styleUrls: ['./leader-messages.page.scss'],\n})\nexport class LeaderMessagesPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  leaderUrl: string;\n\n  loadedLeader: Projectleader = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    project_id: 0,\n  };\n\n  leadedProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_id: 0,\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    messages: [],\n    participants: []\n  };\n\n  newMessage: any = {\n    message: ''\n  };\n\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private alert: AlertService,\n              private projectsService: ProjectsService,\n              private leadersService: LeadersService,\n              private messagesService: MessagesService,\n              private config: ConfigService) {}\n\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('LeaderName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.leaderUrl = paramMap.get('LeaderName');\n    });\n\n    this.getProject();\n    this.getLeader();\n\n    this.subscriptions.push(\n      this.messagesService.update.subscribe(() => this.getProject()),\n      this.messagesService.update.subscribe(() => this.getLeader())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getLeader() {\n    this.leadersService.getSelfLeader().subscribe(data => {\n      this.loadedLeader = data.data;\n    });\n  }\n\n  getProject() {\n    this.projectsService.getSelfLeadedProject('leaders').subscribe(data => {\n      this.leadedProject = data.data;\n    });\n  }\n\n  send(message) {\n    if (message.valid === true) {\n      this.messagesService.createMessage('leaders', this.newMessage).subscribe(data => {\n        this.messagesService.update.emit();\n        this.leadedProject.messages.push(data.data);\n      }, error => {\n        this.alert.error('Versandt der Nachricht fehlgeschlagen!', error.error);\n      });\n      message.reset();\n    }\n  }\n\n  delete(Message) {\n    this.leadedProject.messages = this.leadedProject.messages.filter(message => {\n      return message.id !== Message.id;\n    });\n    this.messagesService.deleteMessage('leaders', Message.id);\n  }\n\n}\n"]}