{"version":3,"sources":["webpack:///src/app/log-in/student-page/registration/registration.page.html","webpack:///src/app/log-in/student-page/registration/registration.module.ts","webpack:///src/app/log-in/student-page/registration/registration.page.ts"],"names":["RegistrationPage","RegistrationPageModule","routes","path","component","projectsService","studentsService","activatedRoute","router","alertCtrl","config","subscriptions","loadedProjects","possibleProjects","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","appendFriend","friendsList","definiteArticle","this","definite_article","indefiniteArticle","indefinite_article","toLowerCase","projectsNoun","app_config","projects_noun","projectNoun","project_noun","eventName","event_name","text","get_content","paramMap","subscribe","has","studentUrl","get","navigate","getProjects","getStudent","push","update","forEach","sub","unsubscribe","getSelfStudent","data","lowestGrade","highestGrade","getFriends","friendData","friend","filterProjects","getAllProjects","project","min_grade","max_grade","authorized","validateProject","getStudentID","length","some","e","JSON","parse","stringify","console","log","create","header","message","buttons","then","alertEl","present","splice","indexOf","stillfriend","putSelfStudent","registrate","userChanges","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Schüler/{{ studentUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Anmeldung</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header color=\"background\">\n      <ion-card-title>Für {{ projectsNoun }} Anmelden</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <form #form=\"ngForm\" name=\"ParticipantForm\" (ngSubmit)=\"registrate()\">\n        <ion-list>\n          <ion-item color=\"items\">\n            <ion-input color=\"text\" required [(ngModel)]=\"loadedStudent.first_name\" name=\"ParticipantFirstName\" placeholder=\"Vorname\" type=\"text\"></ion-input>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-input color=\"text\" required [(ngModel)]=\"loadedStudent.last_name\" name=\"ParticipantLastName\" placeholder=\"Nachname\" type=\"text\"></ion-input>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-label color=\"text\">Klassenstufe</ion-label>\n            <ion-select [selectedText]=\"loadedStudent.grade\" required name=\"ParticipantGrade\" (ionChange)=\"userChanges()\" [(ngModel)]=\"loadedStudent.grade\" cancelText=\"Abbrechen\" doneText=\"Ok\">\n              <ion-select-option value=\"5\">5</ion-select-option>\n              <ion-select-option value=\"6\">6</ion-select-option>\n              <ion-select-option value=\"7\">7</ion-select-option>\n              <ion-select-option value=\"8\">8</ion-select-option>\n              <ion-select-option value=\"9\">9</ion-select-option>\n              <ion-select-option value=\"10\">10</ion-select-option>\n              <ion-select-option value=\"11\">11</ion-select-option>\n            </ion-select>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-radio-group required name=\"ParticipantClass\" [(ngModel)]=\"loadedStudent.letter\">\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">A </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"a\"></ion-radio>\n              </ion-item>\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">B </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"b\"></ion-radio>\n              </ion-item>\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">C </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"c\"></ion-radio>\n              </ion-item>\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">D </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"d\"></ion-radio>\n              </ion-item>\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">E </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"e\"></ion-radio>\n              </ion-item>\n              <ion-item color=\"items\" lines=\"none\">\n                <ion-label color=\"text\">F </ion-label>\n                <ion-radio color=\"text\" slot=\"start\" value=\"f\"></ion-radio>\n              </ion-item>\n            </ion-radio-group>\n          </ion-item>\n        </ion-list>\n\n        <ion-card color=\"background\" *ngIf=\"loadedStudent.project_id == 0\">\n          <form #form=\"ngForm\" name=\"ParticipantForm\" (ngSubmit)=\"appendFriendFunction()\">\n            <ion-item color=\"items\">\n              <ion-input color=\"text\" type=\"text\" placeholder=\"Vorname\" [(ngModel)]=\"appendFriend.first_name\" name=\"ExchangeSecondFirstName\"></ion-input>\n            </ion-item>\n            <ion-item color=\"items\">\n              <ion-input color=\"text\" type=\"text\" placeholder=\"Nachname\" [(ngModel)]=\"appendFriend.last_name\" name=\"ExchangeSecondLastName\"></ion-input>\n            </ion-item>\n            <ion-item color=\"items\">\n              <ion-label color=\"text\">Klassenstufe</ion-label>\n              <ion-select [selectedText]=\"appendFriend.grade\" name=\"ParticipantGrade\" [(ngModel)]=\"appendFriend.grade\" cancelText=\"Abbrechen\" doneText=\"Ok\">\n                <ion-select-option value=\"5\">5</ion-select-option>\n                <ion-select-option value=\"6\">6</ion-select-option>\n                <ion-select-option value=\"7\">7</ion-select-option>\n                <ion-select-option value=\"8\">8</ion-select-option>\n                <ion-select-option value=\"9\">9</ion-select-option>\n                <ion-select-option value=\"10\">10</ion-select-option>\n                <ion-select-option value=\"11\">11</ion-select-option>\n              </ion-select>\n            </ion-item>\n            <ion-item color=\"items\">\n              <ion-radio-group color=\"buttons\" name=\"ParticipantClass\" [(ngModel)]=\"appendFriend.letter\">\n                <ion-item color=\"items\" lines=\"none\">\n                  <ion-label color=\"text\">A </ion-label>\n                  <ion-radio color=\"text\" slot=\"start\" value=\"a\"></ion-radio>\n                </ion-item>\n                <ion-item color=\"items\" lines=\"none\">\n                  <ion-label color=\"text\">B </ion-label>\n                  <ion-radio color=\"text\" slot=\"start\" value=\"b\"></ion-radio>\n                </ion-item>\n                <ion-item color=\"items\" lines=\"none\">\n                  <ion-label color=\"text\">C </ion-label>\n                  <ion-radio color=\"text\" slot=\"start\" value=\"c\"></ion-radio>\n                </ion-item>\n                <ion-item color=\"items\" lines=\"none\">\n                  <ion-label color=\"text\">D </ion-label>\n                  <ion-radio color=\"text\" slot=\"start\" value=\"d\"></ion-radio>\n                </ion-item>\n              </ion-radio-group>\n            </ion-item>\n            <div class=\"ion-padding\">\n              <ion-button color=\"buttons\" [disabled]=\"form.invalid\" expand=\"block\" type=\"submit\" class=\"ion-no-margin\">Als Freund hinzufügen</ion-button>\n            </div>\n          </form>\n        </ion-card>\n\n        <ion-list>\n          <ion-title color=\"background\">Freunde</ion-title>\n          <ion-item color=\"items\" *ngIf=\"loadedStudent.project_id == 0 || loadedStudent.project_id == null\">\n            <ion-list>\n              <ion-item color=\"items\" lines=\"none\" *ngFor=\"let friend of friendsList\">\n                {{ friend.first_name }} {{ friend.last_name }} {{ friend.grade }}{{ friend.letter }}\n                <ion-button color=\"buttons\" slot=\"end\" (click)=\"removeFriendFunction(friend)\"><ion-icon color=\"text\" name=\"close\"></ion-icon></ion-button>\n              </ion-item>\n            </ion-list>\n          </ion-item>\n          <ion-item color=\"items\" *ngIf=\"loadedStudent.project_id == 0 && loadedStudent.role === 1 || loadedStudent.project_id == null && loadedStudent.role === 1\">\n            <ion-label color=\"text\">\n              {{ definiteArticle }} {{ projectNoun }} muss die Klassenstufen {{ lowestGrade }} bis {{ highestGrade }} erlauben.\n            </ion-label>\n          </ion-item>\n          <ion-item color=\"background\" *ngIf=\"loadedStudent.project_id != 0 && loadedStudent.project_id != null || loadedStudent.role === 2\">\n            <ion-label color=\"danger\">\n              Du kanst leider keine Freunde auswählen, da du selbst {{ indefiniteArticle }} {{ projectNoun }} erstellt hast.\n            </ion-label>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-label color=\"text\">1. Wunsch</ion-label>\n            <ion-select required placeholder=\"1. Wunsch\" name=\"ParticipantFirstWish\" [(ngModel)]=\"loadedStudent.first_wish\" okText=\"Auswählen\" cancelText=\"Abbrechen\" type=\"number\"> \n              <ion-select-option *ngFor=\"let project of possibleProjects\" [value]=\"project.id\">{{ project.title }} ({{ project.min_grade }}. - {{ project.max_grade }}.Klasse)</ion-select-option>\n            </ion-select>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-label color=\"text\">2. Wunsch</ion-label>\n            <ion-select required placeholder=\"2. Wunsch\" name=\"ParticipantSecondWish\" [(ngModel)]=\"loadedStudent.second_wish\" okText=\"Auswählen\" cancelText=\"Abbrechen\" type=\"number\">\n              <ion-select-option *ngFor=\"let project of possibleProjects\" [value]=\"project.id\">{{ project.title }} ({{ project.min_grade }}. - {{ project.max_grade }}.Klasse)</ion-select-option>\n            </ion-select>\n          </ion-item>\n          <ion-item color=\"items\">\n            <ion-label color=\"text\">3. Wunsch</ion-label>\n            <ion-select required placeholder=\"3. Wunsch\" name=\"ParticipantThirdWish\" [(ngModel)]=\"loadedStudent.third_wish\" okText=\"Auswählen\" cancelText=\"Abbrechen\">\n              <ion-select-option *ngFor=\"let project of possibleProjects\" [value]=\"project.id\">{{ project.title }} ({{ project.min_grade }}. - {{ project.max_grade }}.Klasse)</ion-select-option>\n            </ion-select>\n          </ion-item>\n        </ion-list>\n        <div class=\"ion-padding\">\n          <ion-button color=\"buttons\" [disabled]=\"form.invalid\" expand=\"block\" type=\"submit\" class=\"ion-no-margin\">Anmelden</ion-button>\n        </div>\n      </form>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegistrationPage } from './registration.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegistrationPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RegistrationPage]\n})\nexport class RegistrationPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { AlertController } from '@ionic/angular';\nimport { Student } from 'src/models/Student.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.page.html',\n  styleUrls: ['./registration.page.scss'],\n})\nexport class RegistrationPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  loadedProjects = [];\n  possibleProjects = [];\n  students;\n  studentUrl: string;\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n  appendFriend: any = {\n    id: 0,\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n  };\n  friendsList = [];\n  lowestGrade: number;\n  highestGrade: number;\n\n  text: string;\n\n  definiteArticle = this.config.definite_article;\n  indefiniteArticle = this.config.indefinite_article.toLowerCase();\n  projectsNoun = this.config.app_config.projects_noun;\n  projectNoun = this.config.app_config.project_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private projectsService: ProjectsService,\n              private studentsService: StudentsService,\n              private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private alertCtrl: AlertController,\n              private config: ConfigService ) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('student-registration');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.studentUrl = paramMap.get('ParticipantName');\n    });\n\n    this.getProjects();\n    this.getStudent();\n\n    this.subscriptions.push(\n      this.projectsService.update.subscribe(() => this.getProjects()),\n      this.studentsService.update.subscribe(() => this.getStudent())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getStudent() {\n    this.studentsService.getSelfStudent().subscribe(data => {\n      this.loadedStudent = data.data;\n      this.lowestGrade = +data.data.grade;\n      this.highestGrade = +data.data.grade;\n\n      this.friendsList = [];\n\n      this.studentsService.getFriends().subscribe(friendData => {\n        this.friendsList = friendData.data;\n\n        this.friendsList.forEach((friend) => {\n          if (+friend.grade <= this.lowestGrade) {\n            this.lowestGrade = +friend.grade;\n          }\n\n          if (+friend.grade >= this.highestGrade) {\n            this.highestGrade = +friend.grade;\n          }\n          this.filterProjects();\n        });\n      });\n    });\n  }\n\n  userChanges() {\n    this.lowestGrade = +this.loadedStudent.grade;\n    this.highestGrade = +this.loadedStudent.grade;\n\n    this.friendsList.forEach((friend) => {\n      if (+friend.grade <= this.lowestGrade) {\n        this.lowestGrade = +friend.grade;\n      }\n\n      if (+friend.grade >= this.highestGrade) {\n        this.highestGrade = +friend.grade;\n      }\n    });\n    this.filterProjects();\n  }\n\n  getProjects() {\n    this.projectsService.getAllProjects().subscribe(data => {\n      this.loadedProjects = data.data;\n    });\n  }\n\n  validateProject(project) {\n    if (this.lowestGrade >= +project.min_grade) {\n      if (+project.max_grade >= this.highestGrade) {\n        if (project.id !== this.loadedStudent.project_id) {\n          if (project.authorized) {\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  filterProjects() {\n    this.possibleProjects = [];\n    // console.log(this.lowestGrade);\n    this.loadedProjects.forEach(project => {\n      if (this.validateProject(project)) {\n        // console.log(project.max_grade);\n        this.possibleProjects.push(project);\n      }\n    });\n  }\n\n  appendFriendFunction() {\n    this.studentsService.getStudentID(this.appendFriend).subscribe(data => {\n      // tslint:disable-next-line: triple-equals\n      if (data.id != 0) {\n        this.appendFriend.id = data.id;\n\n        if (this.friendsList.length < 3  &&  !this.friendsList.some(e => e.id === data.id))  {\n          this.friendsList.push(JSON.parse(JSON.stringify(this.appendFriend)));\n          console.log(this.friendsList);\n\n          if (+this.appendFriend.grade <= this.lowestGrade) {\n            this.lowestGrade = +this.appendFriend.grade;\n          }\n\n          if (+this.appendFriend.grade >= this.highestGrade) {\n            this.highestGrade = +this.appendFriend.grade;\n          }\n        }\n\n        this.filterProjects();\n      } else {\n        this.alertCtrl.create({\n          header: 'Fehler',\n          message: 'Der angegebene Schüler konnte nicht gefunden werden!',\n          buttons: [{\n            text: 'Ok',\n            role: 'cancel',\n            }]\n          }).then(alertEl => {\n            alertEl.present();\n          });\n      }\n    });\n  }\n\n  removeFriendFunction(friend) {\n    this.friendsList.splice(this.friendsList.indexOf(friend), 1);\n\n    this.lowestGrade = +this.loadedStudent.grade;\n    this.highestGrade = +this.loadedStudent.grade;\n\n    this.friendsList.forEach(stillfriend => {\n      if (+stillfriend.grade < this.lowestGrade) {\n        this.lowestGrade = +stillfriend.grade;\n      }\n\n      if (+stillfriend.grade > this.highestGrade) {\n        this.highestGrade = +stillfriend.grade;\n      }\n    });\n\n    this.filterProjects();\n  }\n\n  registrate() {\n    // tslint:disable-next-line: triple-equals\n    if (this.loadedStudent.first_wish != this.loadedStudent.project_id && this.loadedStudent.second_wish != this.loadedStudent.project_id && this.loadedStudent.third_wish != this.loadedStudent.project_id) {\n      if (this.loadedStudent.first_wish !== this.loadedStudent.second_wish && this.loadedStudent.first_wish !== this.loadedStudent.third_wish && this.loadedStudent.second_wish !== this.loadedStudent.third_wish) {\n        if (this.friendsList.length === 3) {\n          this.loadedStudent.first_friend = this.friendsList[0].id;\n          this.loadedStudent.second_friend = this.friendsList[1].id;\n          this.loadedStudent.third_friend = this.friendsList[2].id;\n          this.studentsService.putSelfStudent(this.loadedStudent, this.studentUrl);\n        } else if (this.friendsList.length === 2) {\n          this.loadedStudent.first_friend = this.friendsList[0].id;\n          this.loadedStudent.second_friend = this.friendsList[1].id;\n          this.loadedStudent.third_friend = 0;\n          this.studentsService.putSelfStudent(this.loadedStudent, this.studentUrl);\n        } else if (this.friendsList.length === 1) {\n          this.loadedStudent.first_friend = this.friendsList[0].id;\n          this.loadedStudent.second_friend = 0;\n          this.loadedStudent.third_friend = 0;\n          this.studentsService.putSelfStudent(this.loadedStudent, this.studentUrl);\n        } else {\n          this.loadedStudent.first_friend = 0;\n          this.loadedStudent.second_friend = 0;\n          this.loadedStudent.third_friend = 0;\n          this.studentsService.putSelfStudent(this.loadedStudent, this.studentUrl);\n        }\n      } else {\n        this.alertCtrl.create({\n          header: 'Fehler',\n          message: 'Du must drei verschiedene Projektwünsche angeben!',\n          buttons: [{\n            text: 'Ok',\n            role: 'cancel',\n            }]\n          }).then(alertEl => {\n            alertEl.present();\n          });\n      }\n    } else {\n      this.alertCtrl.create({\n        header: 'Fehler',\n        message: 'Du kannst nicht an deinem eigenen Projekt teilnehmen!',\n        buttons: [{\n          text: 'Ok',\n          role: 'cancel',\n          }]\n        }).then(alertEl => {\n          alertEl.present();\n        });\n    }\n  }\n\n}\n"]}