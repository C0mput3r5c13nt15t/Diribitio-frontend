{"version":3,"sources":["webpack:///src/app/log-in/student-page/student-page.page.html","webpack:///src/app/log-in/student-page/student-page.module.ts","webpack:///src/app/log-in/student-page/student-page.page.ts"],"names":["routes","path","component","StudentPagePage","activatedRoute","router","exchangesService","studentsService","projectsService","scheduleService","config","alert","subscriptions","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","buttonPressed","projectNoun","this","app_config","project_noun","projectsNoun","projects_noun","studentsCanCreateProjects","students_can_create_projects","text","get_content","currentDate","paramMap","subscribe","has","navigate","getSchedule","getStudent","push","update","forEach","sub","unsubscribe","data","getSelfStudent","getAllExchangesForParticipant","requestData","email_verified_at","logOutStudent","sendAuthentificationEmailSubscribe","message","error","logout","refresh","StudentPagePageModule","forChild"],"mappings":"wTAiBI,2BACE,uBACE,QACF,OACF,Q,oBAFI,8B,uCAGJ,2BACE,uBACE,2GACF,OACA,iBACE,wBAAiE,wEAAkC,wBAAa,OAClH,OACF,Q,yBAGI,sBACE,sBAA2D,QAC7D,Q,oBAFyH,0CAA/G,yDACmD,0C,mEAE7D,sBACE,sBAA6D,iCAC/D,Q,oBAFU,yDAAoD,yB,8EAG9D,sBACE,sBAA2D,iCAC7D,Q,oBAFU,yDAAoD,yB,qFAG9D,sBACE,sBAAsE,uCACtE,uBAAsC,QAA4C,OACpF,Q,oBAHU,yDAAoD,wBAEtB,wD,yBAExC,sBACE,sBAA6D,QAC/D,Q,oBAF+I,yCAArI,yDACqD,6C,yBAE/D,sBACE,sBAA6D,QAC/D,Q,oBAF+O,mDAArO,yDACqD,8C,yBAE/D,sBACE,sBAAgE,QAClE,Q,oBAF4K,mDAAlK,yDACwD,8C,+EAElE,sBACE,sBAAgE,iCAClE,Q,oBAFU,yDAAoD,yB,0EAG9D,sBACE,sBAA2D,2CAC7D,Q,oBAFU,yDAAoD,yBChDtE,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCQG,M,MAAMC,EAoDX,YAAoBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAPA,KAAAP,iBACA,KAAAC,SACA,KAAAC,mBACA,KAAAC,kBACA,KAAAC,kBACA,KAAAC,kBACA,KAAAC,SACA,KAAAC,QA1DZ,KAAAC,cAAgC,GAExC,KAAAC,cAAyB,CACvBC,GAAI,EACJC,UAAW,GACXC,MAAO,GACPC,SAAU,GACVC,WAAY,GACZC,UAAW,GACXC,MAAO,EACPC,OAAQ,GACRC,YAAa,EACbC,kBAAmB,GACnBC,aAAc,EACdC,cAAe,EACfC,aAAc,EACdC,WAAY,EACZC,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,KAAM,GAMR,KAAAC,SAAqB,CACnBlB,GAAI,EACJmB,MAAO,YAAW,IAAIC,KAAQ,aAAc,MAC5CC,QAAS,YAAW,IAAID,KAAQ,aAAc,MAC9CE,aAAc,YAAW,IAAIF,KAAQ,aAAc,MACnDG,cAAe,YAAW,IAAIH,KAAQ,aAAc,MACpDI,SAAU,YAAW,IAAIJ,KAAQ,aAAc,MAC/CK,SAAU,YAAW,IAAIL,KAAQ,aAAc,MAC/CM,IAAK,YAAW,IAAIN,KAAQ,aAAc,OAU5C,KAAAO,eAAgB,EAEhB,KAAAC,YAAcC,KAAKjC,OAAOkC,WAAWC,aACrC,KAAAC,aAAeH,KAAKjC,OAAOkC,WAAWG,cAEtC,KAAAC,0BAA4BL,KAAKjC,OAAOkC,WAAWK,6BAWnD,WACEN,KAAKO,KAAOP,KAAKjC,OAAOyC,YAAY,gBAEpCR,KAAKS,YAAc,YAAW,IAAIlB,KAAQ,aAAc,MAExDS,KAAKvC,eAAeiD,SAASC,UAAUD,IAChCA,EAASE,IAAI,oBAChBZ,KAAKtC,OAAOmD,SAAS,CAAC,OAK1Bb,KAAKc,cACLd,KAAKe,aAELf,KAAK/B,cAAc+C,KACjBhB,KAAKlC,gBAAgBmD,OAAON,UAAU,IAAMX,KAAKc,eACjDd,KAAKpC,gBAAgBqD,OAAON,UAAU,IAAMX,KAAKe,cACjDf,KAAKnC,gBAAgBoD,OAAON,UAAU,IAAMX,KAAKe,eAOrD,cACEf,KAAK/B,cAAciD,QAAQC,GAAOA,EAAIC,eAMxC,cACEpB,KAAKlC,gBAAgBgD,cAAcH,UAAUU,IAC3CrB,KAAKX,SAAWgC,EAAKA,OAIzB,aACErB,KAAKpC,gBAAgB0D,iBAAiBX,UAAUU,IAC9CrB,KAAK9B,cAAgBmD,EAAKA,KAC1BrB,KAAK9B,cAAcU,kBAAoB,GACnCoB,KAAKS,YAAcT,KAAKX,SAASM,UAAYK,KAAKS,aAAeT,KAAKX,SAASO,UACjFI,KAAKrC,iBAAiB4D,gCAAgCZ,UAAUa,IAC9DxB,KAAK9B,cAAcU,kBAAoB4C,EAAYH,OAGX,MAAxCrB,KAAK9B,cAAcuD,oBACrBzB,KAAKF,eAAgB,KAK3B,UACEE,KAAKe,aACLf,KAAKlC,gBAAgBgD,cAAcH,UAAUU,IAC3CrB,KAAKX,SAAWgC,EAAKA,OAIzB,SACErB,KAAKpC,gBAAgB8D,gBAGvB,wBACE1B,KAAKpC,gBAAgB+D,qCAAqChB,UAAUU,IAClErB,KAAKhC,MAAMA,MAAMqD,EAAKO,SACtB5B,KAAKF,eAAgB,GACpB+B,IACD7B,KAAKhC,MAAM6D,MAAM,qDAAsDA,EAAMA,U,6CAlItErE,GAAe,kF,uBAAfA,EAAe,gDAFf,CAAC,OAAS,24BFlBvB,qBACE,wBACE,oBAAW,qBAAO,OAClB,uBAAuC,+BAAS,EAAAsE,WAC9C,qBACF,OACF,OACF,OAEA,wBACE,qBACE,0BACE,qBACE,0BAAgB,uBAAqC,SAAwC,OAAY,OACzG,wBAAY,+BAAS,EAAAC,YAAsC,sBAAoC,OACjG,OACF,OACA,oCAKA,oCAQA,4BACE,oBACE,6BAGA,6BAGA,6BAGA,6BAIA,6BAGA,6BAGA,6BAGA,6BAGA,6BAGF,OACA,kBACE,yBAAiE,+BAAS,EAAAD,WAAU,oBAAQ,OAC9F,OACF,OACF,OACF,Q,MArD6D,0DAIvC,4BAKA,+EAU+D,2DAGA,oGAGA,oJAGA,gOAIA,6EAGA,6KAGA,0GAGA,6KAGA,4G,kGErC9E,KDKA,Y,MAAME,G,8BAAAA,I,oDAAAA,IAAqB,SARvB,CACP,IACA,IACA,IACA,IAAaC,SAAS5E,O,GAInB","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-title>Sch체ler</ion-title>\n    <ion-button color=\"buttons\" slot=\"end\" (click)=\"logout()\">\n      <ion-icon name=\"log-out\"></ion-icon>\n    </ion-button>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-card-header>\n      <ion-item color=\"items\" lines=\"none\">\n        <ion-card-title><ion-label color=\"buttons\" text-wrap>Willkommen {{ loadedStudent.user_name }}</ion-label></ion-card-title>\n        <ion-button (click)=\"refresh()\" slot=\"end\" color=\"buttons\"><ion-icon name=\"refresh\"></ion-icon></ion-button>\n      </ion-item>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content *ngIf=\"loadedStudent.email_verified_at == null && !buttonPressed\">\n      <ion-label color=\"text\">\n        Sie heaben Ihre E-Mail noch nicht verifiziert. Bitte holen Sie dies nach bevor Sie fortfahren.\n      </ion-label>\n      <div class=\"ion-padding\">\n        <ion-button color=\"buttons\" expand=\"block\" class=\"ion-no-margin\" (click)=\"sendVerificationEmail()\">E-Mail senden</ion-button>\n      </div>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-list>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"currentDate > schedule.registration\" routerLink='./{{ projectsNoun }}'>\n          <ion-icon color=\"text\" slot=\"start\" name=\"apps\"></ion-icon>Alle {{ projectsNoun }}\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"currentDate > schedule.registration && currentDate <= schedule.sort_students\" [routerLink]=\"['./Anmeldung']\">\n          <ion-icon color=\"text\" slot=\"start\" name=\"log-in\"></ion-icon>Anmeldedaten eingeben\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"loadedStudent.role === 1 && loadedStudent.project_id != 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\" [routerLink]=\"['./Tauschanfrage senden']\">\n          <ion-icon color=\"text\" slot=\"start\" name=\"send\"></ion-icon>Tauschanfragen senden\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"loadedStudent.role === 1 && loadedStudent.exchange_requests.length > 0 && loadedStudent.project_id != 0 && loadedStudent.exchange_id == 0 && currentDate > schedule.exchange && currentDate <= schedule.projects\" [routerLink]=\"['./Tauschanfrage best채tigen']\">\n          <ion-icon color=\"text\" slot=\"start\" name=\"swap-horizontal\"></ion-icon>Tauschanfrage best채tigen\n          <ion-badge color=\"buttons\" slot=\"end\">{{ loadedStudent.exchange_requests.length }}</ion-badge>\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"loadedStudent.role === 1 && loadedStudent.project_id != 0\" routerLink='./{{ projectNoun }}'>\n          <ion-icon color=\"text\" slot=\"start\" name=\"people\"></ion-icon>{{ projectNoun }} einsehen\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"currentDate > schedule.begin && currentDate <= schedule.control && loadedStudent.project_id == 0 && loadedStudent.role === 1 && studentsCanCreateProjects\" routerLink='./{{ projectNoun }} erstellen'>\n          <ion-icon color=\"text\" slot=\"start\" name=\"create\"></ion-icon>{{ projectNoun }} erstellen\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\" routerLink='./{{ projectNoun }} verwalten'>\n          <ion-icon color=\"text\" slot=\"start\" name=\"construct\"></ion-icon>{{ projectNoun }} verwalten\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"currentDate > schedule.begin && currentDate <= schedule.control && loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\" [routerLink]=\"['./Assistenten verwalten']\">\n          <ion-icon color=\"text\" slot=\"start\" name=\"construct\"></ion-icon>Assistenten verwalten\n        </ion-item>\n        <ion-item [disabled]=\"loadedStudent.email_verified_at == null\" color=\"items\" *ngIf=\"loadedStudent.role === 2 && loadedStudent.project_id != 0 && studentsCanCreateProjects\" [routerLink]=\"['./Nachricht senden']\">\n          <ion-icon color=\"text\" slot=\"start\" name=\"send\"></ion-icon>Notiz an das Projekt anf체gen\n        </ion-item>\n      </ion-list>\n      <div class=\"ion-padding\">\n        <ion-button color=\"buttons\" expand=\"block\" class=\"ion-no-margin\" (click)=\"logout()\">Abmelden</ion-button>\n      </div>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { StudentPagePage } from './student-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: StudentPagePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [StudentPagePage]\n})\nexport class StudentPagePageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { StudentsService } from 'src/app/services/students.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ExchangesService } from 'src/app/services/exchanges.service';\nimport { DatePipe } from '@angular/common';\nimport {formatDate} from '@angular/common';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { Student } from 'src/models/Student.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-student-page',\n  templateUrl: './student-page.page.html',\n  styleUrls: ['./student-page.page.scss'],\n  providers: [DatePipe]\n})\nexport class StudentPagePage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  text: string;\n\n  buttonPressed = true;\n\n  projectNoun = this.config.app_config.project_noun;\n  projectsNoun = this.config.app_config.projects_noun;\n\n  studentsCanCreateProjects = this.config.app_config.students_can_create_projects;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private exchangesService: ExchangesService,\n              private studentsService: StudentsService,\n              private projectsService: ProjectsService,\n              private scheduleService: ScheduleService,\n              private config: ConfigService,\n              private alert: AlertService) {}\n\n  ngOnInit() {\n    this.text = this.config.get_content('student-page');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n    });\n\n    this.getSchedule();\n    this.getStudent();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.studentsService.update.subscribe(() => this.getStudent()),\n      this.projectsService.update.subscribe(() => this.getStudent())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getStudent() {\n    this.studentsService.getSelfStudent().subscribe(data => {\n      this.loadedStudent = data.data;\n      this.loadedStudent.exchange_requests = [];\n      if (this.currentDate > this.schedule.exchange && this.currentDate <= this.schedule.projects) {\n        this.exchangesService.getAllExchangesForParticipant().subscribe(requestData => {\n          this.loadedStudent.exchange_requests = requestData.data;\n        });\n      }\n      if (this.loadedStudent.email_verified_at == null) {\n        this.buttonPressed = false;\n      }\n    });\n  }\n\n  refresh() {\n    this.getStudent();\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  logout() {\n    this.studentsService.logOutStudent();\n  }\n\n  sendVerificationEmail() {\n    this.studentsService.sendAuthentificationEmailSubscribe().subscribe(data => {\n      this.alert.alert(data.message);\n      this.buttonPressed = true;\n    }, error => {\n      this.alert.error('Versandt der Verifizierungs E-Mail fehlgeschlagen!', error.error);\n    });\n  }\n\n}\n"]}