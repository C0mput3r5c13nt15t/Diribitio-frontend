{"version":3,"sources":["webpack:///src/app/log-in/student-page/projects/projects.page.html","webpack:///src/app/log-in/student-page/projects/projects.module.ts","webpack:///src/app/log-in/student-page/projects/projects.page.ts"],"names":["routes","path","component","ProjectsPage","projectsService","config","activatedRoute","router","scheduleService","subscriptions","schedule","id","begin","Date","control","registration","sort_students","exchange","projects","end","imageUrl","this","backend_config","projectsNoun","app_config","projects_noun","eventName","event_name","text","get_content","currentDate","paramMap","subscribe","has","studentUrl","get","navigate","getSchedule","getProjects","push","update","forEach","sub","unsubscribe","data","getAllProjects","ProjectsPageModule","forChild"],"mappings":"iRAcI,2BACE,sBACE,QACF,OACF,Q,oBAFI,8B,yBAGJ,2BACE,qBACE,0BACE,sBACE,uBACF,OACF,OACA,2BACE,qBAAuB,QAAyF,OAClH,OACF,OACF,Q,oBAH6B,2G,wBASnB,qB,yCAA8D,yC,yBAI9D,qBAA8D,QAAmB,Q,+BAAnB,uB,sBAC9D,qBAAkE,+BAAmB,Q,6DAPzF,sBACE,wBACE,2BACF,OACA,sBACE,aAAI,QAAmB,OACvB,4BACA,4BACF,OACF,Q,8BAT2D,kCAC7C,kDACD,gDAGL,sBACmB,2CACb,4C,yBARhB,cACE,2BAUF,Q,yBAV+B,yC,yBAFjC,mBACE,sBAYF,Q,qBAZO,oC,yBAFT,2BACE,2BAcF,Q,oBAdY,iCCvBhB,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCGG,M,MAAMC,EAkCX,YAAoBC,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,kBACA,KAAAC,SACA,KAAAC,iBACA,KAAAC,SACA,KAAAC,kBArCZ,KAAAC,cAAgC,GAQxC,KAAAC,SAAqB,CACnBC,GAAI,EACJC,MAAO,YAAW,IAAIC,KAAQ,aAAc,MAC5CC,QAAS,YAAW,IAAID,KAAQ,aAAc,MAC9CE,aAAc,YAAW,IAAIF,KAAQ,aAAc,MACnDG,cAAe,YAAW,IAAIH,KAAQ,aAAc,MACpDI,SAAU,YAAW,IAAIJ,KAAQ,aAAc,MAC/CK,SAAU,YAAW,IAAIL,KAAQ,aAAc,MAC/CM,IAAK,YAAW,IAAIN,KAAQ,aAAc,OAQ5C,KAAAO,SAAWC,KAAKhB,OAAOiB,eAAeF,SACtC,KAAAG,aAAeF,KAAKhB,OAAOmB,WAAWC,cAItC,KAAAC,UAAYL,KAAKhB,OAAOmB,WAAWG,WAUnC,WACEN,KAAKO,KAAOP,KAAKhB,OAAOwB,YAAY,oBAEpCR,KAAKS,YAAc,YAAW,IAAIjB,KAAQ,aAAc,MAExDQ,KAAKf,eAAeyB,SAASC,UAAUD,IAChCA,EAASE,IAAI,mBAIlBZ,KAAKa,WAAaH,EAASI,IAAI,mBAH7Bd,KAAKd,OAAO6B,SAAS,CAAC,OAM1Bf,KAAKgB,cACLhB,KAAKiB,cAELjB,KAAKZ,cAAc8B,KACjBlB,KAAKb,gBAAgBgC,OAAOR,UAAU,IAAMX,KAAKgB,eACjDhB,KAAKjB,gBAAgBoC,OAAOR,UAAU,IAAMX,KAAKiB,gBAOrD,cACEjB,KAAKZ,cAAcgC,QAAQC,GAAOA,EAAIC,eAMxC,cACEtB,KAAKb,gBAAgB6B,cAAcL,UAAUY,IAC3CvB,KAAKX,SAAWkC,EAAKA,OAIzB,cACEvB,KAAKjB,gBAAgByC,iBAAiBb,UAAUY,IAC9CvB,KAAKH,SAAW0B,EAAKA,Q,6CAhFdzC,GAAY,oD,uBAAZA,EAAY,gfFfzB,qBACE,wBACE,uBACE,4BACF,OACA,oBAAW,QAAkB,OAC/B,OACF,OAEA,wBACE,qBACE,0BACE,yBAAgB,SAAkB,OACpC,OACA,oCAKA,oCAYA,oCAgBF,OACF,Q,MA7CyC,0EAE1B,6BAOO,6BAEA,4BAKA,4DAYA,6D,kHEhBf,KDUA,Y,MAAM2C,G,8BAAAA,I,oDAAAA,IAAkB,SARpB,CACP,IACA,IACA,IACA,IAAaC,SAAS/C,O,GAInB","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Schüler/{{ studentUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>{{ projectsNoun }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" class=\"content\">\n    <ion-card-header>\n      <ion-card-title>{{ projectsNoun }}</ion-card-title>\n    </ion-card-header>\n    <ion-card-content *ngIf=\"text\">\n      <ion-label color=\"text\">\n        {{ text }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content *ngIf=\"currentDate <= schedule.registration\">\n      <ion-card color=\"background\">\n        <ion-card-header>\n          <ion-title color=\"danger\">\n            Zu früh\n          </ion-title>\n        </ion-card-header>\n        <ion-card-content>\n          <ion-text color=\"text\">Die {{ projectsNoun }} werden hier erst nach dem {{ schedule.registration }} ausgestellt.</ion-text>\n        </ion-card-content>\n      </ion-card>\n    </ion-card-content>\n    <ion-card-content *ngIf=\"currentDate > schedule.registration\">\n      <ion-list *ngIf=\"projects\">\n        <div *ngFor=\"let project of projects\">\n          <ion-item color=\"background\" *ngIf=\"!!+project.authorized\" [routerLink]=\"['./', project.id]\">\n            <ion-avatar [hidden]=\"project.image == '' || project.image == null\" slot=\"start\">\n              <ion-img *ngIf=\"project.image != '' && project.image != null\" src='{{ imageUrl }}{{ project.image }}'></ion-img>\n            </ion-avatar>\n            <ion-label color=\"text\">\n              <h2>{{ project.title }}</h2>\n              <ion-text color=\"text\" *ngIf=\"!!+project.authorized === true\">{{ project.descr }}</ion-text>\n              <ion-text *ngIf=\"!!+project.authorized === false\" color=\"danger\"> (Nicht zugelassen!)</ion-text>\n            </ion-label>\n          </ion-item>\n        </div>\n      </ion-list>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProjectsPage } from './projects.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProjectsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ProjectsPage]\n})\nexport class ProjectsPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { Project } from 'src/models/Project.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { formatDate } from '@angular/common';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-projects',\n  templateUrl: './projects.page.html',\n  styleUrls: ['./projects.page.scss'],\n})\nexport class ProjectsPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  studentUrl: string;\n  projects: Project[];\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  text: string;\n\n  constructor(private projectsService: ProjectsService,\n              private config: ConfigService,\n              private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private scheduleService: ScheduleService) { }\n\n  ngOnInit() {\n    this.text = this.config.get_content('student-projects');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.studentUrl = paramMap.get('ParticipantName');\n    });\n\n    this.getSchedule();\n    this.getProjects();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.projectsService.update.subscribe(() => this.getProjects())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getProjects() {\n    this.projectsService.getAllProjects().subscribe(data => {\n      this.projects = data.data;\n    });\n  }\n\n}\n"]}