{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-textarea.entry.js"],"names":["Textarea","hostRef","this","ionChange","ionInput","ionStyle","ionBlur","ionFocus","inputId","textareaIds","didBlurAfterEdit","hasFocus","autocapitalize","autofocus","clearOnEdit","debounce","disabled","name","readonly","required","spellcheck","autoGrow","value","onInput","ev","nativeInput","emitStyle","emit","onFocus","focusChange","onBlur","onKeyDown","checkClearOnEdit","d","getValue","runAutoGrow","debounceChanged","document","dispatchEvent","CustomEvent","detail","el","style","height","scrollHeight","textareaWrapper","focus","Promise","resolve","placeholder","hasValue","mode","labelId","label","f","id","class","color","ref","autoCapitalize","autoFocus","enterKeyHint","enterkeyhint","inputMode","inputmode","maxLength","maxlength","minLength","minlength","readOnly","cols","rows","wrap","ios","md"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, f as readTask, h, H as Host, i as getElement } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { d as debounceEvent, r as raf, f as findItemLabel } from './helpers-5c745fbd.js';\nimport { c as createColorClasses } from './theme-5641d27f.js';\n\nconst textareaIosCss = \".sc-ion-textarea-ios-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}.ion-color.sc-ion-textarea-ios-h{background:initial}.ion-color.sc-ion-textarea-ios-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-ios-h,ion-item .sc-ion-textarea-ios-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-ios-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-ios-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-ios{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-ios{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-ios::-webkit-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-moz-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios:-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-ios::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-ios{opacity:0.4}.cloned-input.sc-ion-textarea-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-ios .cloned-input.sc-ion-textarea-ios,[dir=rtl].sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios,[dir=rtl] .sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios{left:unset;right:unset;right:0}.sc-ion-textarea-ios-h{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-ios-h,.item-label-stacked .sc-ion-textarea-ios-h,.item-label-floating.sc-ion-textarea-ios-h,.item-label-floating .sc-ion-textarea-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}\";\n\nconst textareaMdCss = \".sc-ion-textarea-md-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;-ms-flex:1;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}.ion-color.sc-ion-textarea-md-h{background:initial}.ion-color.sc-ion-textarea-md-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-md-h,ion-item .sc-ion-textarea-md-h{-ms-flex-item-align:baseline;align-self:baseline}ion-item.sc-ion-textarea-md-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-md-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-md{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-md{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;resize:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-md::-webkit-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::-moz-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md:-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::-ms-input-placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea.sc-ion-textarea-md::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-md{opacity:0.4}.cloned-input.sc-ion-textarea-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-md .cloned-input.sc-ion-textarea-md,[dir=rtl].sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md,[dir=rtl] .sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md{left:unset;right:unset;right:0}.sc-ion-textarea-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:11px;--padding-start:8px;margin-left:0;margin-right:0;margin-top:8px;margin-bottom:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-md-h,.item-label-stacked .sc-ion-textarea-md-h,.item-label-floating.sc-ion-textarea-md-h,.item-label-floating .sc-ion-textarea-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}\";\n\nconst Textarea = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.inputId = `ion-input-${textareaIds++}`;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'none';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n         */\n        this.clearOnEdit = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the textarea.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * If `true`, the element height will increase based on the value.\n         */\n        this.autoGrow = false;\n        /**\n         * The value of the textarea.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            if (this.nativeInput) {\n                this.value = this.nativeInput.value;\n            }\n            this.emitStyle();\n            this.ionInput.emit(ev);\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusChange();\n            this.ionFocus.emit(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            this.focusChange();\n            this.ionBlur.emit(ev);\n        };\n        this.onKeyDown = () => {\n            this.checkClearOnEdit();\n        };\n    }\n    debounceChanged() {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value) {\n            nativeInput.value = value;\n        }\n        this.runAutoGrow();\n        this.emitStyle();\n        this.ionChange.emit({ value });\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    componentDidLoad() {\n        raf(() => this.runAutoGrow());\n    }\n    runAutoGrow() {\n        const nativeInput = this.nativeInput;\n        if (nativeInput && this.autoGrow) {\n            readTask(() => {\n                nativeInput.style.height = 'auto';\n                nativeInput.style.height = nativeInput.scrollHeight + 'px';\n                if (this.textareaWrapper) {\n                    this.textareaWrapper.style.height = nativeInput.scrollHeight + 'px';\n                }\n            });\n        }\n    }\n    /**\n     * Sets focus on the specified `ion-textarea`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<textarea>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'textarea': true,\n            'input': true,\n            'interactive-disabled': this.disabled,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus\n        });\n    }\n    /**\n     * Check if we need to clear the text input if clearOnEdit is enabled\n     */\n    checkClearOnEdit() {\n        if (!this.clearOnEdit) {\n            return;\n        }\n        // Did the input value change after it was blurred and edited?\n        if (this.didBlurAfterEdit && this.hasValue()) {\n            // Clear the input\n            this.value = '';\n        }\n        // Reset the flag\n        this.didBlurAfterEdit = false;\n    }\n    focusChange() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n        this.emitStyle();\n    }\n    hasValue() {\n        return this.getValue() !== '';\n    }\n    getValue() {\n        return this.value || '';\n    }\n    render() {\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n                [mode]: true,\n            }) }, h(\"div\", { class: \"textarea-wrapper\", ref: el => this.textareaWrapper = el }, h(\"textarea\", { class: \"native-textarea\", \"aria-labelledby\": labelId, ref: el => this.nativeInput = el, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, disabled: this.disabled, maxLength: this.maxlength, minLength: this.minlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, value))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet textareaIds = 0;\nTextarea.style = {\n    ios: textareaIosCss,\n    md: textareaMdCss\n};\n\nexport { Textarea as ion_textarea };\n"]}