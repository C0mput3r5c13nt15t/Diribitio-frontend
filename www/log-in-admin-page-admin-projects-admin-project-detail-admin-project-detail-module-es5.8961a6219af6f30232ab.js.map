{"version":3,"sources":["webpack:///src/app/log-in/admin-page/admin-projects/admin-project-detail/admin-project-detail.page.html","webpack:///src/app/log-in/admin-page/admin-projects/admin-project-detail/admin-project-detail.module.ts","webpack:///src/app/log-in/admin-page/admin-projects/admin-project-detail/admin-project-detail.page.ts"],"names":["AdminProjectDetailPage","AdminProjectDetailPageModule","routes","path","component","activatedRoute","router","scheduleService","projectsService","alertCtrl","config","subscriptions","loadedProject","id","authorized","editable","title","image","descr","leader_name","leader_type","leader_id","cost","first_day_begin","hours","minutes","first_day_end","second_day_begin","second_day_end","min_grade","max_grade","min_participants","max_participants","messages","participants","leader","assistant_student_leaders","loadedStudentLeader","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","schedule","begin","Date","control","registration","sort_students","exchange","projects","end","imageUrl","this","backend_config","projectNoun","app_config","project_noun","projectsNoun","projects_noun","eventName","event_name","adminWrongTime","get_error","currentDate","paramMap","subscribe","has","adminUrl","get","projectId","Number","navigate","getSchedule","getProject","push","update","forEach","sub","unsubscribe","data","getProjectAdmin","toogleAuthorizedProject","Boolean","toogleEditableProject","create","header","message","buttons","text","handler","deleteProject","then","alertEl","present","authorizedChanged","editableChanged","forChild"],"mappings":"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","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Admin/{{ adminUrl }}/{{ projectsNoun }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>{{ projectNoun }}</ion-title>\n    <ion-button [disabled]=\"currentDate <= this.schedule.control || currentDate > this.schedule.registration\" color=\"danger\" slot=\"end\" (click)=\"deleteProject()\">\n      <ion-icon name=\"trash\"></ion-icon>\n    </ion-button>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\"class=\"content\">\n    <ion-img *ngIf=\"loadedProject.image != '' && loadedProject.image != null\" src='{{ imageUrl }}{{ loadedProject.image }}'></ion-img>\n    <ion-card-header>\n      <ion-card-title text-wrap>{{ loadedProject.title }}</ion-card-title>\n      <ion-card-subtitle>\n        <ion-label color=\"text\">Erstellt am {{ loadedProject.created_at | date: 'dd.MM.yyyy' }} | Zuletzt aktualisiert am {{ loadedProject.updated_at | date: 'dd.MM.yyyy' }}</ion-label>\n      </ion-card-subtitle>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-item-group>\n        <ion-item color=\"items\" lines=\"none\" class=\"descr\">\n          <ion-label color=\"text\">{{ loadedProject.descr }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Leiter</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ loadedProject.leader_name }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Kosten</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ loadedProject.cost }}â‚¬</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Zeitraum</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">1.Tag:  {{ loadedProject.first_day_begin }} bis {{ loadedProject.first_day_end }}</ion-label>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">2.Tag:  {{ loadedProject.second_day_begin }} bis {{ loadedProject.second_day_end }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Klassenstufe</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">{{ loadedProject.min_grade }}. bis {{ loadedProject.max_grade }}.Klasse</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teinehmeranzahl</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">von {{ loadedProject.min_participants }} bis {{ loadedProject.max_participants }}</ion-label>\n        </ion-item>\n        <ion-item-divider color=\"background\" *ngIf=\"loadedProject.messages.length\">\n          <ion-label color=\"text\">Notizen</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"loadedProject.messages.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let message of loadedProject.messages\">\n            <ion-card class=\"message\" color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"buttons\">{{ message.sender_name }}</ion-text><br>\n                <ion-text color=\"text\">{{ message.message }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\" *ngIf=\"loadedProject.leader\">\n          <ion-label color=\"text\">Projektleiter</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"loadedProject.leader && loadedProject.leader_type === 'App\\\\Student'\">\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\"><ion-icon name=\"star\"></ion-icon> {{ loadedProject.leader.first_name }} {{ loadedProject.leader.last_name }} {{ loadedProject.leader.grade }}{{ loadedProject.leader.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <div *ngIf=\"loadedProject.leader && loadedProject.leader_type === 'App\\\\Leader'\">\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\"><ion-icon name=\"star\"></ion-icon> {{ loadedProject.leader.user_name }} {{ loadedProject.leader.email }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\" *ngIf=\"loadedProject.assistant_student_leaders.length\">\n          <ion-label color=\"text\">Assistenten</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"loadedProject.assistant_student_leaders.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let assistant of loadedProject.assistant_student_leaders\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\"><ion-icon name=\"star-half\"></ion-icon> {{ assistant.first_name }} {{ assistant.last_name }} {{ assistant.grade }}{{ assistant.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Teilnehmer</ion-label>\n        </ion-item-divider>\n        <div *ngIf=\"loadedProject.participants.length\">\n          <ion-item color=\"items\" lines=\"none\" *ngFor=\"let participant of loadedProject.participants\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"text\">{{ participant.first_name }} {{ participant.last_name }} {{ participant.grade }}{{ participant.letter }}</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <div *ngIf=\"!loadedProject.participants.length\">\n          <ion-item color=\"items\" lines=\"none\">\n            <ion-card color=\"background\">\n              <ion-card-content>\n                <ion-text color=\"danger\">keine Teilnehmer</ion-text>\n              </ion-card-content>\n            </ion-card>\n          </ion-item>\n        </div>\n        <ion-item-divider color=\"background\">\n          <ion-label color=\"text\">Administration</ion-label>\n        </ion-item-divider>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">Zugelassen</ion-label><ion-toggle [disabled]=\"currentDate <= this.schedule.control || currentDate > this.schedule.registration || !!+loadedProject.editable == true\"  color=\"buttons\" [(ngModel)]=\"!!+loadedProject.authorized\" (ionChange)=\"authorizedChanged()\">Aktiviert</ion-toggle>\n        </ion-item>\n        <ion-item color=\"items\" lines=\"none\">\n          <ion-label color=\"text\">Bearbeitbar</ion-label><ion-toggle [disabled]=\"currentDate <= this.schedule.control || currentDate > this.schedule.registration\"  color=\"buttons\" [(ngModel)]=\"!!+loadedProject.editable\" (ionChange)=\"editableChanged()\">Aktiviert</ion-toggle>\n        </ion-item>\n        <div class=\"ion-padding\">\n          <ion-button [disabled]=\"currentDate <= this.schedule.control || currentDate > this.schedule.registration\" expand=\"block\" class=\"ion-no-margin\" color=\"danger\" slot=\"end\" (click)=\"deleteProject()\">{{ projectNoun }} lÃ¶schen</ion-button>\n          <ion-label *ngIf=\"currentDate <= this.schedule.control || currentDate > this.schedule.registration\" color=\"text\">\n            {{ adminWrongTime }}\n          </ion-label>\n        </div>\n      </ion-item-group>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminProjectDetailPage } from './admin-project-detail.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminProjectDetailPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdminProjectDetailPage]\n})\nexport class AdminProjectDetailPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { AlertController } from '@ionic/angular';\nimport { Student } from 'src/models/Student.model';\nimport { Project } from 'src/models/Project.model';\nimport { Schedule } from 'src/models/Schedule.model';\nimport { formatDate } from '@angular/common';\nimport { ScheduleService } from 'src/app/services/schedule.service';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-admin-project-detail',\n  templateUrl: './admin-project-detail.page.html',\n  styleUrls: ['./admin-project-detail.page.scss'],\n})\nexport class AdminProjectDetailPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  adminUrl: string;\n\n  projectId: number;\n\n  loadedProject: Project = {\n    id: 0,\n    authorized: 0,\n    editable: 0,\n    title: '',\n    image: '',\n    descr: '',\n    leader_name: '',\n    leader_type: '',\n    leader_id: 0,\n    cost: 0,\n    first_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    first_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_begin: {\n      hours: 0,\n      minutes: 0,\n    },\n    second_day_end: {\n      hours: 0,\n      minutes: 0,\n    },\n    min_grade: 0,\n    max_grade: 0,\n    min_participants: 0,\n    max_participants: 0,\n    messages: [],\n    participants: [],\n    leader: null,\n    assistant_student_leaders: []\n  };\n\n  loadedStudentLeader: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 2\n  };\n\n  /**\n   * Contains the time schedule of the application\n   */\n  schedule: Schedule = {\n    id: 1,\n    begin: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    control: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    registration: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    sort_students: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    exchange: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    projects: formatDate(new Date(), 'yyyy-MM-dd', 'en'),\n    end: formatDate(new Date(), 'yyyy-MM-dd', 'en')\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  adminWrongTime: string;\n\n  imageUrl = this.config.backend_config.imageUrl;\n  projectNoun = this.config.app_config.project_noun;\n  projectsNoun = this.config.app_config.projects_noun;\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private scheduleService: ScheduleService,\n              private projectsService: ProjectsService,\n              private alertCtrl: AlertController,\n              private config: ConfigService) { }\n\n  ngOnInit() {\n    this.adminWrongTime = this.config.get_error('admin-wrong_time');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ProjectID')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.adminUrl = paramMap.get('AdminName');\n      this.projectId = Number(paramMap.get('ProjectID'));\n    });\n\n    this.getSchedule();\n    this.getProject();\n\n    this.subscriptions.push(\n      this.scheduleService.update.subscribe(() => this.getSchedule()),\n      this.projectsService.update.subscribe(() => this.getProject())\n    );\n  }\n\n  /**\n   * Unsubscribes from all events when the page is unloaded\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Gets the current time schedule for the application and sets the schedule value\n   */\n  getSchedule() {\n    this.scheduleService.getSchedule().subscribe(data => {\n      this.schedule = data.data;\n    });\n  }\n\n  getProject() {\n    this.projectsService.getProjectAdmin(this.projectId).subscribe(data => {\n      if (!data.data) {\n        this.router.navigate([this.eventName + '/Admin/' + this.adminUrl]);\n      } else {\n        this.loadedProject = data.data;\n      }\n    });\n  }\n\n  authorizedChanged() {\n    if (this.currentDate > this.schedule.control && this.currentDate <= this.schedule.registration) {\n      this.projectsService.toogleAuthorizedProject(this.loadedProject.id, Boolean(this.loadedProject.authorized));\n    }\n  }\n\n  editableChanged() {\n    this.projectsService.toogleEditableProject(this.loadedProject.id, Boolean(this.loadedProject.editable));\n  }\n\n  deleteProject() {\n    this.alertCtrl.create({\n      header: 'Sind Sie sicher?',\n      message: 'Wollen Sie dieses Projekt wirklich unwiederruflich lÃ¶schen?',\n      buttons: [{\n        text: 'Abbrechen',\n        role: 'cancel',\n      }, {\n        text: 'LÃ¶schen',\n        handler: () => {\n          this.projectsService.deleteProject(this.loadedProject.id);\n          this.router.navigate([this.eventName + '/Admin/' + this.adminUrl + '/' + this.projectsNoun]);\n        }\n      }]\n    }).then(alertEl => {\n      alertEl.present();\n    });\n  }\n\n}\n"]}