{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-radio_2.entry.js"],"names":["Radio","hostRef","this","ionStyle","ionFocus","ionBlur","inputId","radioButtonIds","radioGroup","checked","name","disabled","updateState","value","onFocus","emit","onBlur","el","closest","addEventListener","removeEventListener","emitStyle","color","mode","labelId","label","f","id","role","class","part","type","style","ios","md","RadioGroup","ionChange","radioGroupIds","allowEmptySelection","onClick","ev","selectedRadio","target","newValue","header","querySelector"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { f as findItemLabel } from './helpers-5c745fbd.js';\nimport { c as createColorClasses, h as hostContext } from './theme-5641d27f.js';\n\nconst radioIosCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary, #3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:10px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\";\n\nconst radioMdCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color:var(--ion-color-step-400, #999999);--color-checked:var(--ion-color-primary, #3880ff);--border-width:2px;--border-style:solid;--border-radius:50%;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0, 0, 0);transform:scale3d(0, 0, 0);-webkit-transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #4c8dff);content:\\\"\\\";opacity:0.2}:host-context([dir=rtl]):host(.ion-focused) .radio-icon::after,:host-context([dir=rtl]).ion-focused .radio-icon::after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\n\nconst Radio = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        this.radioGroup = null;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        this.updateState = () => {\n            if (this.radioGroup) {\n                this.checked = this.radioGroup.value === this.value;\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n    }\n    connectedCallback() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        const radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\n        if (radioGroup) {\n            this.updateState();\n            radioGroup.addEventListener('ionChange', this.updateState);\n        }\n    }\n    disconnectedCallback() {\n        const radioGroup = this.radioGroup;\n        if (radioGroup) {\n            radioGroup.removeEventListener('ionChange', this.updateState);\n            this.radioGroup = null;\n        }\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    render() {\n        const { inputId, disabled, checked, color, el } = this;\n        const mode = getIonMode(this);\n        const labelId = inputId + '-lbl';\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': hostContext('ion-item', el),\n                'interactive': true,\n                'radio-checked': checked,\n                'radio-disabled': disabled,\n            }) }, h(\"div\", { class: \"radio-icon\", part: \"container\" }, h(\"div\", { class: \"radio-inner\", part: \"mark\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"emitStyle\"],\n        \"checked\": [\"emitStyle\"],\n        \"disabled\": [\"emitStyle\"]\n    }; }\n};\nlet radioButtonIds = 0;\nRadio.style = {\n    ios: radioIosCss,\n    md: radioMdCss\n};\n\nconst RadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.onClick = (ev) => {\n            const selectedRadio = ev.target && ev.target.closest('ion-radio');\n            if (selectedRadio) {\n                const currentValue = this.value;\n                const newValue = selectedRadio.value;\n                if (newValue !== currentValue) {\n                    this.value = newValue;\n                }\n                else if (this.allowEmptySelection) {\n                    this.value = undefined;\n                }\n            }\n        };\n    }\n    valueChanged(value) {\n        this.ionChange.emit({ value });\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const el = this.el;\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\n        if (header) {\n            const label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n    }\n    render() {\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onClick: this.onClick, class: getIonMode(this) }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet radioGroupIds = 0;\n\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"]}