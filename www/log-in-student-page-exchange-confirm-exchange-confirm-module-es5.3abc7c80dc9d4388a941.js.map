{"version":3,"sources":["webpack:///src/app/log-in/student-page/exchange-confirm/exchange-confirm.page.html","webpack:///src/app/log-in/student-page/exchange-confirm/exchange-confirm.module.ts","webpack:///src/app/log-in/student-page/exchange-confirm/exchange-confirm.page.ts"],"names":["ExchangeConfirmPage","ExchangeConfirmPageModule","routes","path","component","router","activatedRoute","exchangesService","projectsService","alertCtrl","config","alert","subscriptions","loadedStudent","id","user_name","email","password","first_name","last_name","grade","letter","exchange_id","exchange_requests","first_friend","second_friend","third_friend","first_wish","second_wish","third_wish","project_id","role","eventName","this","app_config","event_name","content","get_content","studentAlreadyExchangeError","get_error","currentDate","Date","paramMap","subscribe","has","studentUrl","get","navigate","getExchanges","push","update","forEach","sub","unsubscribe","getAllExchangesForParticipant","data","request","getLittleProject","sender","response","project_title","title","exchangeID","create","header","message","buttons","text","handler","confirmExchange","emit","error","then","alertEl","present","forChild"],"mappings":"8kBAqBQ,qBACE,uBAAyC,iFAA+B,sBAAsC,OAC9G,QACF,O,0BADE,uI,yBAbR,qBACE,4BACE,yBAAgB,kCAAuB,OACzC,OACA,2BACE,sBACE,QACF,OACF,OACA,2BACE,mBACE,2BAIF,OACF,OACF,Q,kBAXM,gCAKwB,2D,yBAO9B,qBACE,2BACE,mBAAsB,QAAiC,OACzD,OACF,Q,kBAF0B,6CCrB5B,ICOaA,EDSAC,EAhBPC,EAAiB,CACrB,CACEC,KAAM,GACNC,WCISJ,EAAN,WAwCL,WAAoBK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,aANA,KAAAN,SACA,KAAAC,iBACA,KAAAC,mBACA,KAAAC,kBACA,KAAAC,YACA,KAAAC,SACA,KAAAC,QA7CZ,KAAAC,cAAgC,GAIxC,KAAAC,cAAyB,CACvBC,GAAI,EACJC,UAAW,GACXC,MAAO,GACPC,SAAU,GACVC,WAAY,GACZC,UAAW,GACXC,MAAO,EACPC,OAAQ,GACRC,YAAa,EACbC,kBAAmB,GACnBC,aAAc,EACdC,cAAe,EACfC,aAAc,EACdC,WAAY,EACZC,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,KAAM,GAeR,KAAAC,UAAYC,KAAKvB,OAAOwB,WAAWC,W,UAtC9B,O,EAAA,G,EAAA,kCAgDK,WACRF,KAAKG,QAAUH,KAAKvB,OAAO2B,YAAY,4BAEvCJ,KAAKK,4BAA8BL,KAAKvB,OAAO6B,UAAU,4BAEzDN,KAAKO,YAAc,YAAW,IAAIC,KAAQ,aAAc,MAExDR,KAAK3B,eAAeoC,SAASC,UAAUD,YAChCA,EAASE,IAAI,mBAIlBX,EAAKY,WAAaH,EAASI,IAAI,mBAH7Bb,EAAK5B,OAAO0C,SAAS,CAAC,OAM1Bd,KAAKe,eAELf,KAAKrB,cAAcqC,KACjBhB,KAAK1B,iBAAiB2C,OAAOP,UAAU,kBAAMV,EAAKe,oBAlEjD,oCAuEHf,KAAKrB,cAAcuC,QAAQC,YAAG,OAAIA,EAAIC,kBAvEnC,qCA0ES,WACZpB,KAAK1B,iBAAiB+C,gCAAgCX,UAAUY,YAC9DtB,EAAKpB,cAAcU,kBAAoBgC,EAAKA,KAC5CtB,EAAKpB,cAAcU,kBAAkB4B,QAAQK,YAC3CvB,EAAKzB,gBAAgBiD,iBAAiBD,EAAQE,OAAO5B,YAAYa,UAAUgB,YACzEH,EAAQE,OAAOE,cAAgBD,EAASJ,KAAKM,cA/EhD,8BAqFGC,GAAW,WACjB7B,KAAKxB,UAAUsD,OAAO,CACpBC,OAAQ,kBACRC,QAAS,+BACTC,QAAS,CAAC,CACRC,KAAM,YACNpC,KAAM,UACL,CACDoC,KAAM,KACNC,QAAS,kBAAY,YAAD,gBAAC,wBAAD,uGAClBnC,KAAK1B,iBAAiB8D,gBAAgBP,GAAYnB,UAAUY,YAC1DtB,EAAKtB,MAAMA,MAAM4C,EAAKU,SACtBhC,EAAK5B,OAAO0C,SAAS,CAACd,EAAKD,UAAY,eAAcC,EAAKY,aAC1DZ,EAAK1B,iBAAiB2C,OAAOoB,QAC5BC,YACDtC,EAAKtB,MAAM4D,MAAM,8CAA4CA,EAAMA,SANnD,mDAUrBC,KAAKC,YACNA,EAAQC,iB,2BAzGP,K,sCAAM1E,GAAmB,wE,uBAAnBA,EAAmB,8bFhBhC,qBACE,wBACE,uBACE,4BACF,OACA,oBAAW,sCAAwB,OACrC,OACF,OAEA,wBACE,4BAkBA,2BAKF,Q,MA9ByC,0EAOV,oDAkBA,sD,oGCHxB,IAAMC,EAAN,yB,qBAAMA,I,oDAAAA,IAAyB,SAR3B,CACP,IACA,IACA,IACA,IAAa0E,SAASzE,O","file":"x","sourcesContent":["<ion-header>\n  <ion-toolbar color=\"menu\">\n    <ion-button color=\"buttons\" slot=\"start\">\n      <ion-back-button icon=\"arrow-back\" defaultHref=\"{{ eventName }}/Sch체ler/{{ studentUrl }}\"></ion-back-button>\n    </ion-button>\n    <ion-title>Tauschanfrage best채tigen</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content color=\"background\">\n  <ion-card color=\"background\" *ngIf=\"loadedStudent.exchange_id == 0\" class=\"content\">\n    <ion-card-header color=\"background\">\n      <ion-card-title>Tauschanfragen annehmen</ion-card-title>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-label color=\"text\">\n        {{ content }}\n      </ion-label>\n    </ion-card-content>\n    <ion-card-content>\n      <ion-list>\n        <ion-item color=\"items\" *ngFor=\"let exchange of loadedStudent.exchange_requests\">\n          <ion-button color=\"buttons\" slot=\"start\" (click)=\"confirm(exchange.id)\"><ion-icon name=\"checkmark\"></ion-icon></ion-button>\n          {{ exchange.sender.first_name }} {{ exchange.sender.last_name }} {{ exchange.sender.grade }}{{ exchange.sender.letter }} aus {{ exchange.sender.project_title }}\n        </ion-item>\n      </ion-list>\n    </ion-card-content>\n  </ion-card>\n  <ion-card color=\"background\" *ngIf=\"loadedStudent.exchange_id != 0\" class=\"content\">\n    <ion-card-content>\n      <label color=\"danger\">{{ studentAlreadyExchangeError }}</label>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ExchangeConfirmPage } from './exchange-confirm.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ExchangeConfirmPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ExchangeConfirmPage]\n})\nexport class ExchangeConfirmPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ExchangesService } from 'src/app/services/exchanges.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { AlertController } from '@ionic/angular';\nimport { Student } from 'src/models/Student.model';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { formatDate } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-exchange-confirm',\n  templateUrl: './exchange-confirm.page.html',\n  styleUrls: ['./exchange-confirm.page.scss'],\n})\nexport class ExchangeConfirmPage implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  studentUrl: string;\n\n  loadedStudent: Student = {\n    id: 0,\n    user_name: '',\n    email: '',\n    password: '',\n    first_name: '',\n    last_name: '',\n    grade: 0,\n    letter: '',\n    exchange_id: 0,\n    exchange_requests: [],\n    first_friend: 0,\n    second_friend: 0,\n    third_friend: 0,\n    first_wish: 0,\n    second_wish: 0,\n    third_wish: 0,\n    project_id: 0,\n    role: 1\n  };\n\n  /**\n   * Contains the current date in yyyy-MM-dd format\n   */\n  currentDate: any;\n\n  content: string;\n\n  studentAlreadyExchangeError: string;\n\n  /**\n   * Conatins the name of the event that the application is used for\n   */\n  eventName = this.config.app_config.event_name;\n\n  constructor(private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private exchangesService: ExchangesService,\n              private projectsService: ProjectsService,\n              private alertCtrl: AlertController,\n              private config: ConfigService,\n              private alert: AlertService ) { }\n\n  ngOnInit() {\n    this.content = this.config.get_content('student-exchange-confirm');\n\n    this.studentAlreadyExchangeError = this.config.get_error('student-already_exchange');\n\n    this.currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (!paramMap.has('ParticipantName')) {\n        this.router.navigate(['']);\n        return;\n      }\n      this.studentUrl = paramMap.get('ParticipantName');\n    });\n\n    this.getExchanges();\n\n    this.subscriptions.push(\n      this.exchangesService.update.subscribe(() => this.getExchanges()),\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  getExchanges() {\n    this.exchangesService.getAllExchangesForParticipant().subscribe(data => {\n      this.loadedStudent.exchange_requests = data.data;\n      this.loadedStudent.exchange_requests.forEach(request => {\n        this.projectsService.getLittleProject(request.sender.project_id).subscribe(response => {\n          request.sender.project_title = response.data.title;\n        });\n      });\n    });\n  }\n\n  confirm(exchangeID) {\n    this.alertCtrl.create({\n      header: 'Bist du sicher?',\n      message: 'Willst du wirklich tauschen?',\n      buttons: [{\n        text: 'Abbrechen',\n        role: 'cancel',\n      }, {\n        text: 'Ja',\n        handler: async () => {\n          this.exchangesService.confirmExchange(exchangeID).subscribe(data => {\n            this.alert.alert(data.message);\n            this.router.navigate([this.eventName + '/Sch체ler/' + this.studentUrl]);\n            this.exchangesService.update.emit();\n          }, error => {\n            this.alert.error('Best채tigung des Tausches fehlgeschlagen!', error.error);\n          });\n        }\n      }]\n    }).then(alertEl => {\n      alertEl.present();\n    });\n  }\n\n}\n"]}